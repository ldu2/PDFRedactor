{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\nvar _createClass = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\nvar Lexer = /*#__PURE__*/function () {\n  function Lexer(buf, outer) {\n    _classCallCheck(this, Lexer);\n    this.buf = buf;\n    this.pos = 0;\n    this.objects = Object.create(null);\n    this._outer = outer;\n    this.state = outer ? outer.state : {};\n  }\n  _createClass(Lexer, [{\n    key: \"outer\",\n    get: function get() {\n      return this._outer || this;\n    }\n  }, {\n    key: \"read\",\n    value: function read(len) {\n      var buf = this.buf.subarray(this.pos, this.pos + len);\n      this.pos += len;\n      return buf;\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(len) {\n      return String.fromCharCode.apply(null, this.buf.subarray(this.pos, this.pos + len));\n    }\n  }, {\n    key: \"readString\",\n    value: function readString(len) {\n      var str = this.getString(len);\n      this.pos += len;\n      return str;\n    }\n  }, {\n    key: \"skipEOL\",\n    value: function skipEOL(len, trial) {\n      var before = this.pos;\n      var done = false;\n      var count = 0;\n      while (!done && (!len || count < len)) {\n        switch (this.buf[this.pos]) {\n          case 0x0d:\n            // CR\n            if (this.buf[this.pos + 1] === 0x0a) {\n              // CR LF\n              this.pos++;\n            }\n          // falls through\n          case 0x0a:\n            // LF\n            this.pos++;\n            count++;\n            break;\n          default:\n            done = true;\n            break;\n        }\n      }\n      if (!count || len && count < len) {\n        if (!trial) {\n          this._error(\"EOL expected but not found\");\n        }\n        this.pos = before;\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"skipComments\",\n    value: function skipComments(trial) {\n      if (this.getString(1) !== \"%\") {\n        return false;\n      }\n      var pos = this.pos;\n      while (this.buf[pos] !== 0x0a) {\n        pos++;\n      }\n      if (!trial) {\n        this.pos = pos;\n      }\n      return true;\n    }\n  }, {\n    key: \"skipWhitespace\",\n    value: function skipWhitespace(len, trial) {\n      var before = this.pos;\n      var done = false;\n      var count = 0;\n      while (!done && (!len || count < len)) {\n        // skip comments\n        if (this.buf[this.pos] === 0x25 /* % */) {\n          while (this.buf[this.pos] !== 0x0a) {\n            this.pos++;\n          }\n        }\n        if (Lexer.isWhiteSpace(this.buf[this.pos])) {\n          this.pos++;\n          count++;\n        } else {\n          done = true;\n        }\n      }\n      if (!count || len && count < len) {\n        if (!trial) {\n          this._error(\"Whitespace expected but not found\");\n        }\n        this.pos = before;\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"skipSpace\",\n    value: function skipSpace(len, trial) {\n      var before = this.pos;\n      var done = false;\n      var count = 0;\n      while (!done && (!len || count < len)) {\n        if (this.buf[this.pos] === 0x20) {\n          this.pos++;\n          count++;\n        } else {\n          done = true;\n        }\n      }\n      if (len > 0 && !count || len && count < len) {\n        if (!trial) {\n          this._error(\"Space expected but not found\");\n        }\n        this.pos = before;\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift(offset) {\n      this.pos += offset;\n    }\n  }, {\n    key: \"_nextCharCode\",\n    value: function _nextCharCode() {\n      return this.buf[this.pos++];\n    }\n  }, {\n    key: \"_nextChar\",\n    value: function _nextChar() {\n      return String.fromCharCode(this.buf[this.pos++]);\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      throw new Error(err);\n    }\n  }, {\n    key: \"_warning\",\n    value: function _warning(warning) {\n      console.warn(warning);\n    }\n\n    // e.g. 123 43445 +17 −98 0 34.5 −3.62 +123.6 4. −.002 0.0\n  }, {\n    key: \"readNumber\",\n    value: function readNumber(trial) {\n      var before = this.pos;\n      var c = this._nextCharCode();\n      var sign = 1;\n      var isFloat = false;\n      var str = \"\";\n      switch (true) {\n        case c === 0x2b:\n          // '+'\n          break;\n        case c === 0x2d:\n          // '-'\n          sign = -1;\n          break;\n        case c === 0x2e:\n          // '.'\n          isFloat = true;\n          str = \"0.\";\n          break;\n        case c < 0x30 || c > 0x39:\n          // not a number\n          if (!trial) {\n            this._error(\"Invalid number at \" + this.pos + \": \" + String.fromCharCode(c) + \" (code: \" + c + \")\");\n          }\n          this.pos = before;\n          return undefined;\n        default:\n          str += String.fromCharCode(c);\n          break;\n      }\n      var done = false;\n      while (!done && (c = this._nextCharCode()) >= 0) {\n        switch (true) {\n          case c === 0x2e:\n            // '.'\n            if (isFloat) {\n              done = true;\n            } else {\n              isFloat = true;\n              str += \".\";\n            }\n            break;\n          case c >= 0x30 && c <= 0x39:\n            // 0 - 9\n            str += String.fromCharCode(c);\n            break;\n          default:\n            done = true;\n            break;\n        }\n      }\n      this.pos--;\n      var nr = isFloat ? parseFloat(str, 10) : parseInt(str, 10);\n      return nr * sign;\n    }\n  }], [{\n    key: \"isWhiteSpace\",\n    value: function isWhiteSpace(c) {\n      return c === 0x00 ||\n      // NULL\n      c === 0x09 ||\n      // TAB\n      c === 0x0a ||\n      // LF\n      c === 0x0c ||\n      // FF\n      c === 0x0d ||\n      // CR\n      c === 0x20 // SP\n      ;\n    }\n  }]);\n  return Lexer;\n}();\nmodule.exports = Lexer;","map":null,"metadata":{},"sourceType":"script"}