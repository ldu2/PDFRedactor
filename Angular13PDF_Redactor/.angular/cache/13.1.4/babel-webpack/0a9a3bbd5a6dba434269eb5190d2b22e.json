{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\toConsumableArray.js\").default;\nvar _construct = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\construct.js\").default;\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createForOfIteratorHelper.js\").default;\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\nvar _createClass = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\possibleConstructorReturn.js\").default;\nvar _isNativeReflectConstruct = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\isNativeReflectConstruct.js\").default;\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\getPrototypeOf.js\").default;\nvar _inherits = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\inherits.js\").default;\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nvar Fragment = require(\"./fragment\");\nvar LineBreaker = require(\"@rkusa/linebreak\");\nvar unorm = require(\"unorm\");\nvar ops = require(\"./ops\");\nvar util = require(\"./util\");\nvar Font = require(\"./font/base\");\nvar PDF = require(\"./object\");\nvar UNDERLINE_FLAG = 1;\nvar STRIKETHROUGH_FLAG = 2;\nvar Text = module.exports = /*#__PURE__*/function (_Fragment) {\n  _inherits(Text, _Fragment);\n  function Text(doc, parent, opts) {\n    var _this;\n    _classCallCheck(this, Text);\n    _this = _callSuper(this, Text, [doc, parent]);\n    _this._line = [];\n    _this._spaceLeft = 0;\n    _this._parts = 0;\n    _this._isFirstLine = true;\n    _this._isNewLine = true;\n    _this._previousFont = null;\n    _this._previousFontSize = null;\n    _this._previousColor = null;\n    _this._previousHeight = 0;\n    _this._previousDescent = 0;\n    _this.opts = opts;\n    _this.defaultFont = opts.font || _this._doc.defaultFont;\n    _this.defaultFontSize = opts.fontSize || _this._doc.defaultFontSize;\n    _this.defaultColor = opts.color && util.colorToRgb(opts.color) || _this._doc.defaultColor;\n    _this.defaultLineHeight = opts.lineHeight || _this._doc.defaultLineHeight;\n    _this.defaultDecoration = (opts.underline ? UNDERLINE_FLAG : 0) | (opts.strikethrough ? STRIKETHROUGH_FLAG : 0);\n    _this.alignment = opts.alignment || opts.textAlign || \"left\";\n    _this.link = opts.link;\n    _this.destination = opts.destination;\n    _this.goTo = opts.goTo;\n    return _this;\n  }\n\n  /// private API\n  _createClass(Text, [{\n    key: \"_start\",\n    value: function () {\n      var _start2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (this._doc._currentContent) {\n                _context.next = 3;\n                break;\n              }\n              _context.next = 3;\n              return this._doc._startPage();\n            case 3:\n              this._spaceLeft = this._cursor.width;\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _start() {\n        return _start2.apply(this, arguments);\n      }\n      return _start;\n    }()\n  }, {\n    key: \"_end\",\n    value: function () {\n      var _end2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this._doc._write(ops.ET());\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _end() {\n        return _end2.apply(this, arguments);\n      }\n      return _end;\n    }()\n  }, {\n    key: \"_render\",\n    value: function () {\n      var _render2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(text, opts) {\n        var _this2 = this;\n        var font, fontSize, color, lineHeight, link, destination, goTo, decoration, breaker, last, bk, isLastTextChunk, postponeLinebreak, nextWord, _loop, _ret;\n        return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              this._parts--;\n              if (Font.isFont(opts.font || this.defaultFont)) {\n                _context4.next = 3;\n                break;\n              }\n              throw new TypeError(\"invalid font\");\n            case 3:\n              font = this._doc._fontInstance(opts.font || this.defaultFont);\n              fontSize = opts.fontSize || this.defaultFontSize;\n              color = opts.color && util.colorToRgb(opts.color) || this.defaultColor;\n              lineHeight = opts.lineHeight || this.defaultLineHeight;\n              link = opts.link || this.link;\n              destination = opts.destination || this.destination;\n              goTo = opts.goTo || this.goTo;\n              decoration = this.defaultDecoration | (opts.underline ? UNDERLINE_FLAG : 0) | (opts.strikethrough ? STRIKETHROUGH_FLAG : 0); // enforce string\n              text = String(text);\n              text = text.replace(/\\r\\n/g, \"\\n\").replace(/\\u2028|\\u2029/g, \"\"); // <- TODO: does this break things?\n              breaker = new LineBreaker(text);\n              last = 0;\n              isLastTextChunk = this._parts === 0 && this._ended;\n              postponeLinebreak = false;\n              nextWord = null;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var word, until, lastIsSpace, wordWidth, offsetWidth, spaceWidth, isLastWord, notEnoughSpace, i, w, subword, left, height, descent, _iterator, _step, _w2, h, d, remainingText, freeSpace, spacing, isLastLine, chunk, lh, out, rangeStyleArgs, underlineStyle, strikethroughStyle, linkStyle, destinationStyle, goToStyle, lastIx, _i, _w, fontStyleChanged, colorChanged, alias, kerning, pos, _i2, _subword;\n                return _regeneratorRuntime().wrap(function _loop$(_context3) {\n                  while (1) switch (_context3.prev = _context3.next) {\n                    case 0:\n                      word = null;\n                      if (!nextWord) {\n                        _context3.next = 6;\n                        break;\n                      }\n                      word = nextWord;\n                      nextWord = null;\n                      _context3.next = 17;\n                      break;\n                    case 6:\n                      if (!bk) {\n                        _context3.next = 17;\n                        break;\n                      }\n                      until = bk.position;\n                      lastIsSpace = text[bk.position - 1].match(/\\s/);\n                      if (lastIsSpace) {\n                        until--;\n                      }\n\n                      // get the string between the last break and this one\n                      word = text.slice(last, until);\n\n                      // separate words, if has whitespace, is at the end of the text or\n                      // ends with a whitespace\n                      if (!(bk.position === text.length || lastIsSpace)) {\n                        _context3.next = 15;\n                        break;\n                      }\n                      last = bk.position;\n                      _context3.next = 16;\n                      break;\n                    case 15:\n                      return _context3.abrupt(\"return\", 0);\n                    case 16:\n                      word = unorm.nfc(word);\n                    case 17:\n                      wordWidth = 0;\n                      offsetWidth = 0;\n                      spaceWidth = 0;\n                      if (word) {\n                        wordWidth = font.stringWidth(word, fontSize);\n                        offsetWidth = wordWidth.width;\n                        spaceWidth = font.stringWidth(\" \", fontSize).width;\n\n                        // add whitespace length for every word, except the first on in the line\n                        // on the first line, during the first word the line array is empty, however, for succeeding\n                        // lines the line array already contains the word that did not fit into the previous line\n                        if (_this2._line.length > (_this2._isNewLine ? 0 : 1)) {\n                          offsetWidth += spaceWidth;\n                        }\n                      }\n\n                      // render line if there is a line break, if we hit the last word of the text, if we\n                      // have manual page breaks, or if there is not enough space on the line left\n                      isLastWord = (!bk || bk.position === text.length) && isLastTextChunk;\n                      notEnoughSpace = _this2._spaceLeft < offsetWidth;\n                      if (!(postponeLinebreak || bk && bk.required || isLastWord || notEnoughSpace)) {\n                        _context3.next = 99;\n                        break;\n                      }\n                      if (!(_this2._line.length === 0 && notEnoughSpace)) {\n                        _context3.next = 39;\n                        break;\n                      }\n                      i = word.length - 1;\n                    case 26:\n                      if (!(i >= 0)) {\n                        _context3.next = 39;\n                        break;\n                      }\n                      w = font.stringWidth(word.slice(i), fontSize);\n                      if (!(_this2._spaceLeft >= offsetWidth - w.width)) {\n                        _context3.next = 36;\n                        break;\n                      }\n                      subword = word.slice(0, i);\n                      _this2._line.push(new TextChunk({\n                        wordWidth: font.stringWidth(subword, fontSize),\n                        spaceWidth: spaceWidth,\n                        word: subword,\n                        font: font,\n                        fontSize: fontSize,\n                        color: color,\n                        decoration: decoration,\n                        link: link,\n                        destination: destination,\n                        goTo: goTo\n                      }));\n                      offsetWidth -= w.width;\n                      _this2._spaceLeft -= offsetWidth;\n                      nextWord = word.slice(i);\n                      word = null;\n                      return _context3.abrupt(\"break\", 39);\n                    case 36:\n                      --i;\n                      _context3.next = 26;\n                      break;\n                    case 39:\n                      // if there is enough space, add word to the current line\n                      if (!postponeLinebreak && word && _this2._spaceLeft - offsetWidth >= 0) {\n                        _this2._line.push(new TextChunk({\n                          wordWidth: wordWidth,\n                          spaceWidth: spaceWidth,\n                          word: word,\n                          font: font,\n                          fontSize: fontSize,\n                          color: color,\n                          decoration: decoration,\n                          link: link,\n                          destination: destination,\n                          goTo: goTo\n                        }));\n                        _this2._spaceLeft -= offsetWidth;\n                        word = null;\n                      }\n\n                      // render line\n                      left = _this2._cursor.x; // calc max line height\n                      height = 0;\n                      descent = 0;\n                      _iterator = _createForOfIteratorHelper(_this2._line);\n                      try {\n                        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                          _w2 = _step.value;\n                          h = _w2.font.lineHeight(_w2.fontSize, true);\n                          if (h > height) {\n                            height = h;\n                          }\n                          d = -_w2.font.descent(_w2.fontSize);\n                          if (d > descent) {\n                            descent = d;\n                          }\n                        }\n                      } catch (err) {\n                        _iterator.e(err);\n                      } finally {\n                        _iterator.f();\n                      }\n                      height *= lineHeight;\n                      descent *= lineHeight;\n                      if (height === 0) {\n                        height = _this2._previousHeight;\n                        descent = _this2._previousDescent;\n                      }\n\n                      // break page if necessary\n                      if (_this2._cursor.doesFit(height)) {\n                        _context3.next = 63;\n                        break;\n                      }\n                      if (_this2._isFirstLine) {\n                        _context3.next = 52;\n                        break;\n                      }\n                      _context3.next = 52;\n                      return _this2._doc._write(ops.ET());\n                    case 52:\n                      // execute page break\n                      // add remaining text as new text to the queue of pending operations\n                      remainingText = bk ? (word ? word + \" \" : \"\") + text.substring(bk.position) : \"\";\n                      if (bk && bk.required) {\n                        // if the page break happened due to a line break, we have to make sure to add it back\n                        // to the queue as well\n                        remainingText += \"\\n\";\n                      }\n                      _this2._pending.unshift(function () {\n                        _this2._parts++;\n                        return _this2._render(remainingText, opts);\n                      });\n                      _context3.next = 57;\n                      return _this2._parent._pageBreak(1);\n                    case 57:\n                      _this2._isFirstLine = true;\n                      _this2._isNewLine = true;\n                      _this2._previousFont = null;\n                      _this2._previousFontSize = null;\n                      _this2._previousColor = null;\n                      return _context3.abrupt(\"return\", 1);\n                    case 63:\n                      // shift cursor; since rendering is done above the y coordinate,\n                      // we have to update the cursor before rendering the line\n                      _this2._cursor.y -= height; // shift y cursor\n\n                      // calculate remaining space\n                      freeSpace = _this2._spaceLeft; // alignment\n                      spacing = 0;\n                      _context3.t0 = _this2.alignment;\n                      _context3.next = _context3.t0 === \"right\" ? 69 : _context3.t0 === \"center\" ? 71 : _context3.t0 === \"justify\" ? 73 : 78;\n                      break;\n                    case 69:\n                      left += freeSpace;\n                      return _context3.abrupt(\"break\", 78);\n                    case 71:\n                      left += _this2._cursor.width / 2 - (_this2._cursor.width - freeSpace) / 2;\n                      return _context3.abrupt(\"break\", 78);\n                    case 73:\n                      isLastLine = isLastWord || bk && bk.required;\n                      if (!(isLastLine && freeSpace / _this2._cursor.width > 0.2)) {\n                        _context3.next = 76;\n                        break;\n                      }\n                      return _context3.abrupt(\"break\", 78);\n                    case 76:\n                      if (_this2._line.length > 1) {\n                        spacing = freeSpace / (_this2._line.length - 1);\n                      }\n                      return _context3.abrupt(\"break\", 78);\n                    case 78:\n                      // render words\n                      chunk = \"\";\n                      if (_this2._isFirstLine) {\n                        _this2._previousHeight = height;\n                        chunk += ops.BT() +\n                        // set initial pos\n                        ops.Tm(1, 0, 0, 1, left, _this2._cursor.y) +\n                        // set leading\n                        ops.TL(_this2._previousHeight);\n                      } else {\n                        lh = height + _this2._previousDescent;\n                        if (height > 0 && lh !== _this2._previousHeight) {\n                          _this2._previousHeight = lh;\n                          chunk += ops.TL(lh);\n                        }\n                        if (left > _this2._cursor.x) {\n                          // set new x and y position\n                          chunk += ops.Tm(1, 0, 0, 1, left, _this2._cursor.y);\n                        } else {\n                          // move to next line\n                          chunk += ops.Tstar();\n                        }\n                      }\n                      if (height > 0) {\n                        _this2._previousDescent = descent;\n                      }\n                      out = [];\n                      rangeStyleArgs = [_this2._doc, left, _this2._cursor.y, height, spacing];\n                      underlineStyle = _construct(UnderlineRangeStyle, rangeStyleArgs);\n                      strikethroughStyle = _construct(StrikethroughRangeStyle, rangeStyleArgs);\n                      linkStyle = _construct(LinkRangeStyle, rangeStyleArgs);\n                      destinationStyle = _construct(DestinationRangeStyle, rangeStyleArgs);\n                      goToStyle = _construct(GoToRangeStyle, rangeStyleArgs);\n                      lastIx = _this2._line.length - 1;\n                      for (_i = 0; _i < _this2._line.length; ++_i) {\n                        _w = _this2._line[_i];\n                        fontStyleChanged = _w.font !== _this2._previousFont || _w.fontSize !== _this2._previousFontSize;\n                        colorChanged = !util.rgbEqual(_w.color, _this2._previousColor);\n                        chunk += underlineStyle.applyStyle(_w, _i === lastIx, fontStyleChanged || colorChanged);\n                        chunk += strikethroughStyle.applyStyle(_w, _i === lastIx, fontStyleChanged || colorChanged);\n                        chunk += linkStyle.applyStyle(_w, _i === lastIx, fontStyleChanged || colorChanged);\n                        chunk += destinationStyle.applyStyle(_w, _i === lastIx, fontStyleChanged || colorChanged);\n                        chunk += goToStyle.applyStyle(_w, _i === lastIx, fontStyleChanged || colorChanged);\n                        if (fontStyleChanged || colorChanged) {\n                          if (out.length > 0) {\n                            chunk += ops.TJ(out);\n                          }\n                          if (fontStyleChanged) {\n                            _this2._previousFont = _w.font;\n                            _this2._previousFontSize = _w.fontSize;\n                            alias = _this2._doc._fontAlias(_w.font); // set font and font size\n                            chunk += ops.Tf(alias, _w.fontSize);\n                          }\n\n                          // set color if it has changed\n                          if (colorChanged) {\n                            _this2._previousColor = _w.color;\n                            chunk += ops.sc.apply(ops, _toConsumableArray(_w.color));\n                          }\n                          out.length = 0;\n                        }\n                        kerning = _w.wordWidth.kerning;\n                        if (kerning.length > 0) {\n                          pos = 0;\n                          for (_i2 = 0; _i2 < kerning.length; ++_i2) {\n                            _subword = _w.word.substring(pos, kerning[_i2].pos);\n                            out.push(_w.font.encode(_subword), kerning[_i2].offset);\n                            pos = kerning[_i2].pos;\n                          }\n                          out.push(_w.font.encode(_w.word.substring(pos)));\n                        } else {\n                          out.push(_w.font.encode(_w.word));\n                        }\n                        if (_i < _this2._line.length - 1 && _w.spaceWidth > 0) {\n                          // if is not last and has spaceWidth set\n                          out.push(calcSpaceWidth(spacing, _w.font, _w.fontSize));\n                        }\n                      }\n                      if (out.length > 0) {\n                        chunk += ops.TJ(out);\n                      }\n                      _context3.next = 93;\n                      return _this2._doc._write(chunk);\n                    case 93:\n                      _this2._cursor.y -= descent;\n\n                      // reset / update variables\n                      _this2._spaceLeft = _this2._cursor.width;\n                      _this2._line.length = 0; // empty line array\n                      _this2._isFirstLine = false;\n                      _this2._isNewLine = bk && bk.required;\n                      postponeLinebreak = bk && bk.required && word !== null && word.length > 0;\n                    case 99:\n                      // consider word for next line\n                      if (word) {\n                        _this2._line.push(new TextChunk({\n                          wordWidth: wordWidth,\n                          spaceWidth: spaceWidth,\n                          word: word,\n                          font: font,\n                          fontSize: fontSize,\n                          color: color,\n                          decoration: decoration,\n                          link: link,\n                          destination: destination,\n                          goTo: goTo\n                        }));\n                        _this2._spaceLeft -= offsetWidth;\n                      }\n                      bk = null;\n                    case 101:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }, _loop);\n              });\n            case 19:\n              if (!(nextWord !== null || postponeLinebreak || (bk = breaker.nextBreak()) || isLastTextChunk && this._line.length > 0)) {\n                _context4.next = 28;\n                break;\n              }\n              return _context4.delegateYield(_loop(), \"t0\", 21);\n            case 21:\n              _ret = _context4.t0;\n              if (!(_ret === 0)) {\n                _context4.next = 24;\n                break;\n              }\n              return _context4.abrupt(\"continue\", 19);\n            case 24:\n              if (!(_ret === 1)) {\n                _context4.next = 26;\n                break;\n              }\n              return _context4.abrupt(\"break\", 28);\n            case 26:\n              _context4.next = 19;\n              break;\n            case 28:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _render(_x, _x2) {\n        return _render2.apply(this, arguments);\n      }\n      return _render;\n    }() /// public API\n  }, {\n    key: \"add\",\n    value: function add(text, opts) {\n      var _this3 = this;\n      this._begin(null); // trigger error, if text is already ended\n      this._parts++;\n      this._pending.push(function () {\n        return _this3._render(text, opts || {});\n      });\n      return this;\n    }\n  }, {\n    key: \"append\",\n    value: function append(text, opts) {\n      var _this4 = this;\n      this._begin(null); // trigger error, if text is already ended\n\n      this._parts++;\n      this._pending.push(function () {\n        if (_this4._line.length > 0) {\n          var w = _this4._line[_this4._line.length - 1];\n          _this4._spaceLeft += w.spaceWidth;\n          w.spaceWidth = 0; // set space width to zero\n        }\n        return _this4._render(text, opts || {});\n      });\n      return this;\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      var _this5 = this;\n      this._begin(null); // trigger error, if text is already ended\n\n      this._parts++;\n      this._pending.push(function () {\n        return _this5._render(\"\\n\\n\", {});\n      });\n      return this;\n    }\n  }]);\n  return Text;\n}(Fragment);\nfunction calcSpaceWidth(spacing, font, fontSize) {\n  var scaleFactor = 1000 / fontSize;\n  return -(spacing + font.stringWidth(\" \", fontSize)) * scaleFactor;\n}\nvar TextChunk = /*#__PURE__*/_createClass(function TextChunk(values) {\n  _classCallCheck(this, TextChunk);\n  this.wordWidth = values.wordWidth;\n  this.spaceWidth = values.spaceWidth;\n  this.word = values.word;\n  this.font = values.font;\n  this.fontSize = values.fontSize;\n  this.color = values.color;\n  this.decoration = values.decoration;\n  this.link = values.link;\n  this.destination = values.destination;\n  this.goTo = values.goTo;\n});\nvar RangeStyle = /*#__PURE__*/function () {\n  function RangeStyle(doc, x, y, height, spacing) {\n    _classCallCheck(this, RangeStyle);\n    this.doc = doc;\n    this.from = x;\n    this.width = 0;\n    this.y = y;\n    this.height = height;\n    this.spacing = spacing;\n    this.isActive = false;\n    this.lastSpaceWidth = 0;\n  }\n  _createClass(RangeStyle, [{\n    key: \"applyStyle\",\n    value: function applyStyle(textChunk, isLast, fontStyleChanged) {\n      var shouldApply = this._active(textChunk);\n      var chunk = \"\";\n      if (shouldApply && !fontStyleChanged && this.isActive) {\n        this.width += this.lastSpaceWidth;\n      }\n      if (this.isActive && (!shouldApply || fontStyleChanged)) {\n        chunk += this._applyStyle(textChunk);\n        this.from += this.width + this.lastSpaceWidth;\n        this.width = 0;\n      }\n      if (!this.isActive || shouldApply || this.isActive && fontStyleChanged) {\n        this._start(textChunk);\n      }\n      this.isActive = shouldApply;\n      this.lastSpaceWidth = this.spacing || textChunk.spaceWidth;\n      if (this.isActive) {\n        this.width += textChunk.wordWidth;\n      } else {\n        this.from += textChunk.wordWidth + this.lastSpaceWidth;\n      }\n      if (this.isActive && isLast) {\n        chunk += this._applyStyle(textChunk);\n      }\n      return chunk;\n    }\n  }, {\n    key: \"_active\",\n    value: function _active(textChunk) {\n      // abstract\n    }\n  }, {\n    key: \"_start\",\n    value: function _start(textChunk) {\n      // abstract\n    }\n  }, {\n    key: \"_applyStyle\",\n    value: function _applyStyle(textChunk) {\n      // abstract\n    }\n  }]);\n  return RangeStyle;\n}();\nvar UnderlineRangeStyle = /*#__PURE__*/function (_RangeStyle) {\n  _inherits(UnderlineRangeStyle, _RangeStyle);\n  function UnderlineRangeStyle(doc, x, y, height, spacing) {\n    var _this6;\n    _classCallCheck(this, UnderlineRangeStyle);\n    _this6 = _callSuper(this, UnderlineRangeStyle, [doc, x, y, height, spacing]);\n    _this6.underlinePosition = 0;\n    _this6.underlineThickness = 0;\n    _this6.color = null;\n    return _this6;\n  }\n  _createClass(UnderlineRangeStyle, [{\n    key: \"_active\",\n    value: function _active(textChunk) {\n      return textChunk.decoration & UNDERLINE_FLAG;\n    }\n  }, {\n    key: \"_start\",\n    value: function _start(textChunk) {\n      this.underlinePosition = textChunk.font.underlinePosition(textChunk.fontSize);\n      this.underlineThickness = textChunk.font.underlineThickness(textChunk.fontSize);\n      this.color = textChunk.color;\n    }\n  }, {\n    key: \"_applyStyle\",\n    value: function _applyStyle(textChunk) {\n      var y = this.y + this.underlinePosition;\n      return ops.w(this.underlineThickness) +\n      // line width\n      ops.SC.apply(ops, _toConsumableArray(this.color)) +\n      // stroking color\n      ops.S(this.from, y, \"m\", this.from + this.width, y, \"l\"); // line\n    }\n  }]);\n  return UnderlineRangeStyle;\n}(RangeStyle);\nvar StrikethroughRangeStyle = /*#__PURE__*/function (_RangeStyle2) {\n  _inherits(StrikethroughRangeStyle, _RangeStyle2);\n  function StrikethroughRangeStyle(doc, x, y, height, spacing) {\n    var _this7;\n    _classCallCheck(this, StrikethroughRangeStyle);\n    _this7 = _callSuper(this, StrikethroughRangeStyle, [doc, x, y, height, spacing]);\n    _this7.ascent = 0;\n    _this7.lineThickness = 0;\n    _this7.color = null;\n    return _this7;\n  }\n  _createClass(StrikethroughRangeStyle, [{\n    key: \"_active\",\n    value: function _active(textChunk) {\n      return textChunk.decoration & STRIKETHROUGH_FLAG;\n    }\n  }, {\n    key: \"_start\",\n    value: function _start(textChunk) {\n      this.ascent = textChunk.font.ascent(textChunk.fontSize);\n      this.lineThickness = textChunk.font.underlineThickness(textChunk.fontSize);\n      this.color = textChunk.color;\n    }\n  }, {\n    key: \"_applyStyle\",\n    value: function _applyStyle(textChunk) {\n      var y = this.y + this.ascent * 0.35;\n      return ops.w(this.lineThickness) +\n      // line width\n      ops.SC.apply(ops, _toConsumableArray(this.color)) +\n      // stroking color\n      ops.S(this.from, y, \"m\", this.from + this.width, y, \"l\"); // line\n    }\n  }]);\n  return StrikethroughRangeStyle;\n}(RangeStyle);\nvar LinkRangeStyle = /*#__PURE__*/function (_RangeStyle3) {\n  _inherits(LinkRangeStyle, _RangeStyle3);\n  function LinkRangeStyle(doc, x, y, height, spacing) {\n    var _this8;\n    _classCallCheck(this, LinkRangeStyle);\n    _this8 = _callSuper(this, LinkRangeStyle, [doc, x, y, height, spacing]);\n    _this8.link = null;\n    return _this8;\n  }\n  _createClass(LinkRangeStyle, [{\n    key: \"applyStyle\",\n    value: function applyStyle(textChunk, isLast, fontStyleChanged) {\n      if (this.link && textChunk.link !== this.link) {\n        fontStyleChanged = true;\n      }\n      return RangeStyle.prototype.applyStyle.call(this, textChunk, isLast, fontStyleChanged);\n    }\n  }, {\n    key: \"_active\",\n    value: function _active(textChunk) {\n      return textChunk.link !== undefined;\n    }\n  }, {\n    key: \"_start\",\n    value: function _start(textChunk) {\n      this.link = textChunk.link;\n    }\n  }, {\n    key: \"_applyStyle\",\n    value: function _applyStyle(textChunk) {\n      this.doc._annotations.push(new PDF.Dictionary({\n        Type: \"Annot\",\n        Subtype: \"Link\",\n        Rect: new PDF.Array([this.from, this.y, this.from + this.width, this.y + this.height]),\n        Border: new PDF.Array([0, 0, 0]),\n        A: new PDF.Dictionary({\n          Type: \"Action\",\n          S: \"URI\",\n          URI: new PDF.String(this.link)\n        })\n      }));\n      return \"\";\n    }\n  }]);\n  return LinkRangeStyle;\n}(RangeStyle);\nvar DestinationRangeStyle = /*#__PURE__*/function (_RangeStyle4) {\n  _inherits(DestinationRangeStyle, _RangeStyle4);\n  function DestinationRangeStyle(doc, x, y, height, spacing) {\n    var _this9;\n    _classCallCheck(this, DestinationRangeStyle);\n    _this9 = _callSuper(this, DestinationRangeStyle, [doc, x, y, height, spacing]);\n    _this9.destination = null;\n    return _this9;\n  }\n  _createClass(DestinationRangeStyle, [{\n    key: \"applyStyle\",\n    value: function applyStyle(textChunk, isLast, fontStyleChanged) {\n      if (this.destination && textChunk.destination !== this.destination) {\n        fontStyleChanged = true;\n      }\n      return RangeStyle.prototype.applyStyle.call(this, textChunk, isLast, fontStyleChanged);\n    }\n  }, {\n    key: \"_active\",\n    value: function _active(textChunk) {\n      return textChunk.destination !== undefined;\n    }\n  }, {\n    key: \"_start\",\n    value: function _start(textChunk) {\n      this.destination = textChunk.destination;\n    }\n  }, {\n    key: \"_applyStyle\",\n    value: function _applyStyle(textChunk) {\n      this.doc._destinations.set(this.destination, new PDF.Array([this.doc._currentPage.toReference(), new PDF.Name(\"XYZ\"), this.from, this.y, null]));\n      return \"\";\n    }\n  }]);\n  return DestinationRangeStyle;\n}(RangeStyle);\nvar GoToRangeStyle = /*#__PURE__*/function (_RangeStyle5) {\n  _inherits(GoToRangeStyle, _RangeStyle5);\n  function GoToRangeStyle(doc, x, y, height, spacing) {\n    var _this10;\n    _classCallCheck(this, GoToRangeStyle);\n    _this10 = _callSuper(this, GoToRangeStyle, [doc, x, y, height, spacing]);\n    _this10.goTo = null;\n    return _this10;\n  }\n  _createClass(GoToRangeStyle, [{\n    key: \"applyStyle\",\n    value: function applyStyle(textChunk, isLast, fontStyleChanged) {\n      if (this.goTo && textChunk.goTo !== this.goTo) {\n        fontStyleChanged = true;\n      }\n      return RangeStyle.prototype.applyStyle.call(this, textChunk, isLast, fontStyleChanged);\n    }\n  }, {\n    key: \"_active\",\n    value: function _active(textChunk) {\n      return textChunk.goTo !== undefined;\n    }\n  }, {\n    key: \"_start\",\n    value: function _start(textChunk) {\n      this.goTo = textChunk.goTo;\n    }\n  }, {\n    key: \"_applyStyle\",\n    value: function _applyStyle(textChunk) {\n      this.doc._annotations.push(new PDF.Dictionary({\n        Type: \"Annot\",\n        Subtype: \"Link\",\n        Rect: new PDF.Array([this.from, this.y, this.from + this.width, this.y + this.height]),\n        Border: new PDF.Array([0, 0, 0]),\n        A: new PDF.Dictionary({\n          S: \"GoTo\",\n          D: new PDF.String(this.goTo)\n        })\n      }));\n      return \"\";\n    }\n  }]);\n  return GoToRangeStyle;\n}(RangeStyle);\nText.DestinationRangeStyle = DestinationRangeStyle;","map":null,"metadata":{},"sourceType":"script"}