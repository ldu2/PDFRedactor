{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\nvar _createClass = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nvar Fragment = require(\"./fragment\");\nvar util = require(\"./util\");\nvar ops = require(\"./ops\");\nvar PDF = require(\"./object\");\nmodule.exports = /*#__PURE__*/function () {\n  function Table(doc, parent, opts) {\n    _classCallCheck(this, Table);\n    Fragment.prototype._init.call(this, doc, parent);\n    this._cursor = this._cursor.clone();\n    if (\"width\" in opts) {\n      this._cursor.width = opts.width;\n    }\n    this._rowCount = 0;\n    this.widths = [];\n    applyOpts.call(this, opts);\n    if (this.borderVerticalWidths) {\n      this._cursor.width -= this.borderVerticalWidths[0] / 2;\n      this._cursor.startX += this.borderVerticalWidths[0] / 2;\n      this._cursor.width -= this.borderVerticalWidths[this.borderVerticalWidths.length - 1] / 2;\n    }\n\n    // distribute remaining width among *-columns\n    var remainingWidth = this._cursor.width;\n    var distribute = [];\n    for (var i in this.widths) {\n      var w = this.widths[i];\n      if (!w || w === \"*\") {\n        distribute.push(i);\n      } else {\n        remainingWidth -= w;\n      }\n    }\n    if (distribute.length > 0) {\n      var _w = remainingWidth / distribute.length;\n      var _iterator = _createForOfIteratorHelper(distribute),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _i = _step.value;\n          this.widths[_i] = _w;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    this._headers = [];\n    // reference to the last header context\n    //  only defined for tables with exclusively headers\n    this._last_header_cxt = null;\n    this._is_header_rendered = false;\n  }\n\n  /// private API\n  _createClass(Table, [{\n    key: \"_pageBreak\",\n    value: function () {\n      var _pageBreak2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(level, insideBreak) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Fragment.prototype._pageBreak.call(this, level);\n            case 2:\n              if (insideBreak) {\n                _context.next = 5;\n                break;\n              }\n              _context.next = 5;\n              return this._renderHeader(true);\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _pageBreak(_x, _x2) {\n        return _pageBreak2.apply(this, arguments);\n      }\n      return _pageBreak;\n    }()\n  }, {\n    key: \"_end\",\n    value: function () {\n      var _end2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this = this;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              // render headers if there are no rows\n              if (!this._is_header_rendered && this._headers.length) {\n                this._pending.push(function () {\n                  return _this._renderHeader();\n                });\n              }\n              _context2.next = 3;\n              return Fragment.prototype._end.call(this);\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _end() {\n        return _end2.apply(this, arguments);\n      }\n      return _end;\n    }()\n  }, {\n    key: \"_begin\",\n    value: function _begin(ctx) {\n      Fragment.prototype._begin.call(this, ctx);\n    }\n  }, {\n    key: \"_renderHeader\",\n    value: function () {\n      var _renderHeader2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(isPageBreak) {\n        var headerHeight, chunk, _iterator2, _step2, header, offset, _iterator3, _step3, obj, alias;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this._headers.length) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 2:\n              if (this._doc._currentContent) {\n                _context3.next = 5;\n                break;\n              }\n              _context3.next = 5;\n              return this._doc._startPage();\n            case 5:\n              headerHeight = this._headers.reduce(function (total, header) {\n                return total + header.height;\n              }, 0);\n              if (!(!isPageBreak && !this._cursor.doesFit(headerHeight))) {\n                _context3.next = 10;\n                break;\n              }\n              _context3.next = 9;\n              return this._pageBreak(1, false);\n            case 9:\n              return _context3.abrupt(\"return\");\n            case 10:\n              chunk = \"\";\n              _iterator2 = _createForOfIteratorHelper(this._headers);\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  header = _step2.value;\n                  offset = this._cursor.y - header.startedAtY;\n                  if (offset !== 0) {\n                    // offset header to the top\n                    chunk += ops.q() + ops.cm(1, 0, 0, 1, 0, offset);\n                  }\n                  _iterator3 = _createForOfIteratorHelper(header._objects);\n                  try {\n                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                      obj = _step3.value;\n                      alias = new PDF.Name(\"TH\" + obj.id);\n                      this._doc._currentContent._xobjects[alias] = obj.toReference();\n                      chunk += ops.Do(alias);\n                    }\n                  } catch (err) {\n                    _iterator3.e(err);\n                  } finally {\n                    _iterator3.f();\n                  }\n                  this._cursor.y -= header.height;\n                  if (offset !== 0) {\n                    chunk += ops.Q();\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n              _context3.next = 15;\n              return this._doc._write(chunk);\n            case 15:\n              this._is_header_rendered = true;\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _renderHeader(_x3) {\n        return _renderHeader2.apply(this, arguments);\n      }\n      return _renderHeader;\n    }()\n  }, {\n    key: \"_row\",\n    value: function _row(opts, isHeader) {\n      if (!opts || typeof opts !== \"object\") {\n        opts = {};\n      }\n      opts = Object.assign({\n        font: this._doc.defaultFont,\n        fontSize: this._doc.defaultFontSize,\n        color: this._doc.defaultColor,\n        lineHeight: this._doc.defaultLineHeight\n      }, this.opts, opts);\n\n      // whitelist\n      opts = {\n        padding: opts.padding,\n        paddingLeft: opts.paddingLeft,\n        paddingRight: opts.paddingRight,\n        paddingTop: opts.paddingTop,\n        paddingBottom: opts.paddingBottom,\n        backgroundColor: opts.backgroundColor,\n        font: opts.font,\n        fontSize: opts.fontSize,\n        color: opts.color,\n        lineHeight: opts.lineHeight,\n        minHeight: opts.minHeight\n      };\n      var Row = isHeader ? require(\"./tableheader\") : require(\"./row\");\n      var ctx = new Row(this._doc, this, opts);\n      this._last_header_cxt = isHeader ? ctx : null;\n      this._begin(ctx);\n      ctx._widths = this.widths.slice();\n      ctx._borderVerticalWidths = this.borderVerticalWidths && this.borderVerticalWidths.slice();\n      ctx._borderVerticalColors = this.borderVerticalColors && this.borderVerticalColors.slice();\n      if (this.borderHorizontalWidths) {\n        ctx._topBorderWidth = this.borderHorizontalWidths(this._rowCount);\n        ctx._topBorderColor = util.colorToRgb(this.borderHorizontalColors(this._rowCount));\n        if (!isHeader) {\n          ctx._bottomBorderWidth = this.borderHorizontalWidths(this._rowCount + 1);\n          ctx._bottomBorderColor = util.colorToRgb(this.borderHorizontalColors(this._rowCount + 1));\n        }\n\n        // should have a top border if there are only header rows in the table\n        ctx._hasTopBorder = this._rowCount === this._headers.length;\n      }\n      ctx._pending.push(function () {\n        return ctx._start();\n      });\n      this._pending.push(ctx._pending);\n      this._rowCount++;\n      return ctx;\n    }\n\n    /// public API\n  }, {\n    key: \"end\",\n    value: function end() {\n      // if the table only has headers, add a bottom border to the last header row\n      if (!this._is_header_rendered && this._last_header_cxt && this.borderHorizontalWidths) {\n        this._last_header_cxt._bottomBorderWidth = this.borderHorizontalWidths(this._rowCount);\n        this._last_header_cxt._bottomBorderColor = util.colorToRgb(this.borderHorizontalColors(this._rowCount));\n      }\n      return Fragment.prototype.end.call(this);\n    }\n  }, {\n    key: \"row\",\n    value: function row(opts) {\n      var _this2 = this;\n      // Defer rendering of the headers until either a row is added or _end\n      if (this._rowCount === this._headers.length) {\n        this._pending.push(function () {\n          return _this2._renderHeader();\n        });\n      }\n      return this._row(opts, false);\n    }\n  }, {\n    key: \"header\",\n    value: function header(opts) {\n      // Can only add more headers if there are no rows added yet\n      if (this._rowCount > this._headers.length) {\n        throw new Error(\"The table already has rows, cannot add additional headers\");\n      }\n      var ctx = this._row(opts, true);\n      this._headers.push(ctx);\n      return ctx;\n    }\n  }]);\n  return Table;\n}();\nfunction applyOpts(opts) {\n  this.opts = opts;\n\n  // opts.width\n  if (\"widths\" in opts && Array.isArray(opts.widths)) {\n    this.widths = opts.widths;\n  } else {\n    throw new TypeError(\"widths (array) option is required for tables\");\n  }\n\n  // opts.borderVerticalWidths\n  this.borderVerticalWidths = null;\n  if (opts.borderVerticalWidths) {\n    if (!Array.isArray(opts.borderVerticalWidths)) {\n      throw new TypeError(\"borderVerticalWidths must be an array\");\n    }\n    if (opts.borderVerticalWidths.length !== this.widths.length + 1) {\n      throw new TypeError(\"wrong borderVerticalWidths length (expected \".concat(this.widths.length + 1, \"; got \").concat(opts.borderVerticalWidths.length, \")\"));\n    }\n    this.borderVerticalWidths = opts.borderVerticalWidths;\n  }\n  // opts.borderVerticalWidth\n  else if (typeof opts.borderVerticalWidth === \"number\") {\n    this.borderVerticalWidths = [];\n    for (var i = 0; i <= this.widths.length; ++i) {\n      this.borderVerticalWidths.push(opts.borderVerticalWidth);\n    }\n  }\n\n  // opts.borderVerticalColors\n  this.borderVerticalColors = null;\n  if (opts.borderVerticalColors) {\n    if (!Array.isArray(opts.borderVerticalColors)) {\n      throw new TypeError(\"borderVerticalColors must be an array\");\n    }\n    if (opts.borderVerticalColors.length !== this.widths.length + 1) {\n      throw new TypeError(\"wrong borderVerticalColors length (expected \".concat(this.widths.length + 1, \"; got \").concat(opts.borderVerticalColors.length, \")\"));\n    }\n    this.borderVerticalColors = opts.borderVerticalColors.map(function (c) {\n      return util.colorToRgb(c);\n    });\n  }\n  // opts.borderVerticalColor\n  else if (typeof opts.borderVerticalColor === \"number\") {\n    this.borderVerticalColors = [];\n    var color = util.colorToRgb(opts.borderVerticalColor);\n    for (var _i2 = 0; _i2 <= this.widths.length; ++_i2) {\n      this.borderVerticalColors.push(color);\n    }\n  }\n\n  // opts.borderHorizontalWidths\n  this.borderHorizontalWidths = null;\n  if (opts.borderHorizontalWidths) {\n    if (typeof opts.borderHorizontalWidths !== \"function\") {\n      throw new TypeError(\"borderHorizontalWidths must be a function\");\n    }\n    this.borderHorizontalWidths = opts.borderHorizontalWidths;\n  }\n  // opts.borderHorizontalWidth\n  else if (typeof opts.borderHorizontalWidth === \"number\") {\n    this.borderHorizontalWidths = function () {\n      return opts.borderHorizontalWidth;\n    };\n  }\n\n  // opts.borderHorizontalColors\n  this.borderHorizontalColors = null;\n  if (opts.borderHorizontalColors) {\n    if (typeof opts.borderHorizontalColors !== \"function\") {\n      throw new TypeError(\"borderHorizontalColors must be a function\");\n    }\n    this.borderHorizontalColors = opts.borderHorizontalColors;\n  }\n  // opts.borderHorizontalColor\n  else if (typeof opts.borderHorizontalColor === \"number\") {\n    this.borderHorizontalColors = function () {\n      return opts.borderHorizontalColor;\n    };\n  }\n\n  // opts.borderWidth\n  var borderWidth = opts.borderWidth || 0;\n  if (borderWidth > 0) {\n    if (!this.borderVerticalWidths) {\n      this.borderVerticalWidths = [];\n      for (var _i3 = 0; _i3 <= this.widths.length; ++_i3) {\n        this.borderVerticalWidths.push(borderWidth);\n      }\n    }\n    if (!this.borderHorizontalWidths) {\n      this.borderHorizontalWidths = function () {\n        return borderWidth;\n      };\n    }\n  }\n\n  // opts.borderColor\n  var borderColor = opts.borderColor || 0x000000;\n  if (!this.borderVerticalColors) {\n    this.borderVerticalColors = [];\n    for (var _i4 = 0; _i4 <= this.widths.length; ++_i4) {\n      this.borderVerticalColors.push(util.colorToRgb(borderColor));\n    }\n  }\n  if (!this.borderHorizontalColors) {\n    this.borderHorizontalColors = function () {\n      return borderColor;\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"script"}