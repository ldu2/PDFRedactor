{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\nvar _createClass = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\nvar opentype = require(\"opentype.js\");\nmodule.exports = /*#__PURE__*/function () {\n  function FontSubset(font) {\n    _classCallCheck(this, FontSubset);\n    this.font = font;\n    this.name = \"PDFJS+\" + this.font.names.fontFamily.en;\n    this.glyphs = {\n      0: this.font.charToGlyph(String.fromCharCode(0)),\n      // notDef glyph\n      32: this.font.charToGlyph(String.fromCharCode(32)) // space\n    };\n    this.subset = {\n      0: 0,\n      32: 32\n    };\n    this.mapping = {\n      0: 0,\n      32: 32\n    };\n    this.pos = 33;\n  }\n  _createClass(FontSubset, [{\n    key: \"use\",\n    value: function use(chars) {\n      for (var i = 0, len = chars.length; i < len; ++i) {\n        var code = chars.charCodeAt(i);\n        if (code in this.mapping || code < 33) {\n          continue;\n        }\n        var glyph = this.font.charToGlyph(chars[i]);\n        this.subset[this.pos] = code;\n        this.mapping[code] = this.pos;\n        this.glyphs[this.pos] = glyph;\n        this.pos++;\n      }\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(str) {\n      var codes = [];\n      for (var i = 0, len = str.length; i < len; ++i) {\n        codes.push(this.mapping[str.charCodeAt(i)]);\n      }\n      return String.fromCharCode.apply(String, codes);\n    }\n  }, {\n    key: \"cmap\",\n    value: function cmap() {\n      return this.subset;\n    }\n  }, {\n    key: \"save\",\n    value: function save() {\n      var glyphs = [];\n      for (var pos in this.glyphs) {\n        glyphs.push(this.glyphs[pos]);\n      }\n      var font = new opentype.Font({\n        familyName: this.name,\n        styleName: this.font.names.fontSubfamily.en,\n        unitsPerEm: this.font.unitsPerEm,\n        ascender: this.font.ascender,\n        descender: this.font.descender,\n        glyphs: glyphs\n      });\n      return font.toArrayBuffer();\n    }\n  }]);\n  return FontSubset;\n}();","map":null,"metadata":{},"sourceType":"script"}