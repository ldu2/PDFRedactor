{"ast":null,"code":"import _possibleConstructorReturn from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\possibleConstructorReturn.js\";\nimport _isNativeReflectConstruct from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\isNativeReflectConstruct.js\";\nimport _get from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n  return function (source) {\n    return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n  };\n}\nvar GroupByOperator = /*#__PURE__*/function () {\n  function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n    _classCallCheck(this, GroupByOperator);\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n  }\n  _createClass(GroupByOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    }\n  }]);\n  return GroupByOperator;\n}();\nvar GroupBySubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(GroupBySubscriber, _Subscriber);\n  function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n    var _this;\n    _classCallCheck(this, GroupBySubscriber);\n    _this = _callSuper(this, GroupBySubscriber, [destination]);\n    _this.keySelector = keySelector;\n    _this.elementSelector = elementSelector;\n    _this.durationSelector = durationSelector;\n    _this.subjectSelector = subjectSelector;\n    _this.groups = null;\n    _this.attemptedToUnsubscribe = false;\n    _this.count = 0;\n    return _this;\n  }\n  _createClass(GroupBySubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var key;\n      try {\n        key = this.keySelector(value);\n      } catch (err) {\n        this.error(err);\n        return;\n      }\n      this._group(value, key);\n    }\n  }, {\n    key: \"_group\",\n    value: function _group(value, key) {\n      var groups = this.groups;\n      if (!groups) {\n        groups = this.groups = new Map();\n      }\n      var group = groups.get(key);\n      var element;\n      if (this.elementSelector) {\n        try {\n          element = this.elementSelector(value);\n        } catch (err) {\n          this.error(err);\n        }\n      } else {\n        element = value;\n      }\n      if (!group) {\n        group = this.subjectSelector ? this.subjectSelector() : new Subject();\n        groups.set(key, group);\n        var groupedObservable = new GroupedObservable(key, group, this);\n        this.destination.next(groupedObservable);\n        if (this.durationSelector) {\n          var duration;\n          try {\n            duration = this.durationSelector(new GroupedObservable(key, group));\n          } catch (err) {\n            this.error(err);\n            return;\n          }\n          this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n        }\n      }\n      if (!group.closed) {\n        group.next(element);\n      }\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      var groups = this.groups;\n      if (groups) {\n        groups.forEach(function (group, key) {\n          group.error(err);\n        });\n        groups.clear();\n      }\n      this.destination.error(err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var groups = this.groups;\n      if (groups) {\n        groups.forEach(function (group, key) {\n          group.complete();\n        });\n        groups.clear();\n      }\n      this.destination.complete();\n    }\n  }, {\n    key: \"removeGroup\",\n    value: function removeGroup(key) {\n      this.groups.delete(key);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      if (!this.closed) {\n        this.attemptedToUnsubscribe = true;\n        if (this.count === 0) {\n          _get(_getPrototypeOf(GroupBySubscriber.prototype), \"unsubscribe\", this).call(this);\n        }\n      }\n    }\n  }]);\n  return GroupBySubscriber;\n}(Subscriber);\nvar GroupDurationSubscriber = /*#__PURE__*/function (_Subscriber2) {\n  _inherits(GroupDurationSubscriber, _Subscriber2);\n  function GroupDurationSubscriber(key, group, parent) {\n    var _this2;\n    _classCallCheck(this, GroupDurationSubscriber);\n    _this2 = _callSuper(this, GroupDurationSubscriber, [group]);\n    _this2.key = key;\n    _this2.group = group;\n    _this2.parent = parent;\n    return _this2;\n  }\n  _createClass(GroupDurationSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.complete();\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var parent = this.parent,\n        key = this.key;\n      this.key = this.parent = null;\n      if (parent) {\n        parent.removeGroup(key);\n      }\n    }\n  }]);\n  return GroupDurationSubscriber;\n}(Subscriber);\nexport var GroupedObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(GroupedObservable, _Observable);\n  function GroupedObservable(key, groupSubject, refCountSubscription) {\n    var _this3;\n    _classCallCheck(this, GroupedObservable);\n    _this3 = _callSuper(this, GroupedObservable);\n    _this3.key = key;\n    _this3.groupSubject = groupSubject;\n    _this3.refCountSubscription = refCountSubscription;\n    return _this3;\n  }\n  _createClass(GroupedObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var subscription = new Subscription();\n      var refCountSubscription = this.refCountSubscription,\n        groupSubject = this.groupSubject;\n      if (refCountSubscription && !refCountSubscription.closed) {\n        subscription.add(new InnerRefCountSubscription(refCountSubscription));\n      }\n      subscription.add(groupSubject.subscribe(subscriber));\n      return subscription;\n    }\n  }]);\n  return GroupedObservable;\n}(Observable);\nvar InnerRefCountSubscription = /*#__PURE__*/function (_Subscription) {\n  _inherits(InnerRefCountSubscription, _Subscription);\n  function InnerRefCountSubscription(parent) {\n    var _this4;\n    _classCallCheck(this, InnerRefCountSubscription);\n    _this4 = _callSuper(this, InnerRefCountSubscription);\n    _this4.parent = parent;\n    parent.count++;\n    return _this4;\n  }\n  _createClass(InnerRefCountSubscription, [{\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var parent = this.parent;\n      if (!parent.closed && !this.closed) {\n        _get(_getPrototypeOf(InnerRefCountSubscription.prototype), \"unsubscribe\", this).call(this);\n        parent.count -= 1;\n        if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n          parent.unsubscribe();\n        }\n      }\n    }\n  }]);\n  return InnerRefCountSubscription;\n}(Subscription); //# sourceMappingURL=groupBy.js.map","map":null,"metadata":{},"sourceType":"module"}