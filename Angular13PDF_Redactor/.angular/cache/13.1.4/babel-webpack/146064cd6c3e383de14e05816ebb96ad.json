{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\nvar _createClass = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\nvar PDFDictionary = require(\"./dictionary\");\nvar PDFReference = require(\"./reference\");\nvar PDFValue = require(\"./value\");\nvar PDFObject = /*#__PURE__*/function () {\n  function PDFObject(type) {\n    _classCallCheck(this, PDFObject);\n    this.id = null;\n    this.rev = 0;\n    this.properties = new PDFDictionary();\n    this.reference = new PDFReference(this);\n    this.content = null;\n    if (type) {\n      this.prop(\"Type\", type);\n    }\n\n    // TODO: still necessary?\n    // used to have obj.object API for both indirect and direct objects\n    //   this.object = this\n  }\n  _createClass(PDFObject, [{\n    key: \"prop\",\n    value: function prop(key, val) {\n      this.properties.add(key, val);\n    }\n  }, {\n    key: \"toReference\",\n    value: function toReference() {\n      return this.reference;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.id.toString() + \" \" + this.rev + \" obj\\n\" + (this.properties.length ? this.properties.toString() + \"\\n\" : \"\") + (this.content !== null ? this.content.toString() + \"\\n\" : \"\") + \"endobj\";\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(xref, lexer, trial) {\n      var before = lexer.pos;\n      lexer.skipWhitespace(null, true);\n      var id = lexer.readNumber(trial);\n      if (id === undefined && !trial) {\n        throw new Error(\"Invalid object\");\n      }\n      lexer.skipWhitespace(1, trial);\n      var generation = lexer.readNumber(trial);\n      if (generation === undefined && !trial) {\n        throw new Error(\"Invalid object\");\n      }\n      lexer.skipWhitespace(1, trial);\n      if (lexer.getString(3) !== \"obj\") {\n        if (trial) {\n          lexer.pos = before;\n          return undefined;\n        }\n        throw new Error(\"Invalid object\");\n      }\n      lexer.shift(3);\n      lexer.skipEOL(1, true);\n      lexer.skipWhitespace(null, true);\n      var obj = PDFObject.parseInner(xref, lexer);\n      lexer.skipWhitespace(null, true);\n      if (lexer.readString(3) !== \"end\") {\n        throw new Error(\"Invalid object: `end` not found\");\n      }\n      return obj;\n    }\n  }, {\n    key: \"parseInner\",\n    value: function parseInner(xref, lexer) {\n      var value = PDFValue.parse(xref, lexer, true);\n      if (value === undefined) {\n        throw new Error(\"Empty object\");\n      }\n      lexer.skipWhitespace(null, true);\n      var obj = new PDFObject();\n      if (value instanceof PDFDictionary) {\n        obj.properties = value;\n        if (lexer.getString(6) === \"stream\") {\n          lexer.shift(6);\n          lexer.skipEOL(1);\n          var length = obj.properties.get(\"Length\");\n          if (length === undefined) {\n            throw new Error(\"Invalid Stream: no length specified\");\n          }\n          if (typeof length === \"object\") {\n            var pos = lexer.pos;\n            length = length.object.content;\n            lexer.pos = pos;\n          }\n          var PDFStream = require(\"./stream\"); // lazy load, cause circular referecnes\n          var stream = new PDFStream(obj);\n          stream.content = lexer.read(length);\n          lexer.skipEOL(1, true);\n\n          // not to be expected according to the PDF spec, but there are some PDF files that indent\n          // the stream\n          lexer.skipWhitespace(null, true);\n          if (lexer.readString(9) !== \"endstream\") {\n            throw new Error(\"Invalid stream: `endstream` not found\");\n          }\n          lexer.skipEOL(1, true);\n        }\n      } else {\n        obj.content = value;\n      }\n      return obj;\n    }\n  }]);\n  return PDFObject;\n}();\nmodule.exports = PDFObject;","map":null,"metadata":{},"sourceType":"script"}