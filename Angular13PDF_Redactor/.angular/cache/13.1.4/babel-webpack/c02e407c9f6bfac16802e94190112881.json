{"ast":null,"code":"import _possibleConstructorReturn from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\possibleConstructorReturn.js\";\nimport _isNativeReflectConstruct from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\isNativeReflectConstruct.js\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\nvar NONE = {};\nexport function combineLatest() {\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n  var resultSelector = null;\n  var scheduler = null;\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = observables.pop();\n  }\n  if (typeof observables[observables.length - 1] === 'function') {\n    resultSelector = observables.pop();\n  }\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = observables[0];\n  }\n  return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\nexport var CombineLatestOperator = /*#__PURE__*/function () {\n  function CombineLatestOperator(resultSelector) {\n    _classCallCheck(this, CombineLatestOperator);\n    this.resultSelector = resultSelector;\n  }\n  _createClass(CombineLatestOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n    }\n  }]);\n  return CombineLatestOperator;\n}();\nexport var CombineLatestSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(CombineLatestSubscriber, _OuterSubscriber);\n  function CombineLatestSubscriber(destination, resultSelector) {\n    var _this;\n    _classCallCheck(this, CombineLatestSubscriber);\n    _this = _callSuper(this, CombineLatestSubscriber, [destination]);\n    _this.resultSelector = resultSelector;\n    _this.active = 0;\n    _this.values = [];\n    _this.observables = [];\n    return _this;\n  }\n  _createClass(CombineLatestSubscriber, [{\n    key: \"_next\",\n    value: function _next(observable) {\n      this.values.push(NONE);\n      this.observables.push(observable);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var observables = this.observables;\n      var len = observables.length;\n      if (len === 0) {\n        this.destination.complete();\n      } else {\n        this.active = len;\n        this.toRespond = len;\n        for (var i = 0; i < len; i++) {\n          var observable = observables[i];\n          this.add(subscribeToResult(this, observable, observable, i));\n        }\n      }\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(unused) {\n      if ((this.active -= 1) === 0) {\n        this.destination.complete();\n      }\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      var values = this.values;\n      var oldVal = values[outerIndex];\n      var toRespond = !this.toRespond ? 0 : oldVal === NONE ? --this.toRespond : this.toRespond;\n      values[outerIndex] = innerValue;\n      if (toRespond === 0) {\n        if (this.resultSelector) {\n          this._tryResultSelector(values);\n        } else {\n          this.destination.next(values.slice());\n        }\n      }\n    }\n  }, {\n    key: \"_tryResultSelector\",\n    value: function _tryResultSelector(values) {\n      var result;\n      try {\n        result = this.resultSelector.apply(this, values);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n      this.destination.next(result);\n    }\n  }]);\n  return CombineLatestSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=combineLatest.js.map","map":null,"metadata":{},"sourceType":"module"}