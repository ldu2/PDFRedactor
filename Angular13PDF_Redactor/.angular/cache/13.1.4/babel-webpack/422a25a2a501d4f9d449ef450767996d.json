{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createForOfIteratorHelper.js\").default;\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\nvar _createClass = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nvar Fragment = require(\"./fragment\");\nvar util = require(\"./util\");\nvar ops = require(\"./ops\");\nvar Cell = require(\"./cell\");\nmodule.exports = /*#__PURE__*/function () {\n  function Row(doc, parent, opts) {\n    _classCallCheck(this, Row);\n    Fragment.prototype._init.call(this, doc, parent);\n    this.opts = opts;\n\n    // use an own queue for pending operations\n    this._pending = [];\n\n    // keep track of the cells that have already been ended;\n    // this is necessary to be able to still draw their background and finalize their rendering\n    // once all cells are ended (scenario where not all cells span the same amount of pages)\n    this._endedCells = [];\n\n    // keep a count of not ended cells to adjust the rotation of cells on page breaks properly\n    this._columns = 0;\n\n    // when a page break occures inside a cell, the cells are rotated before an actual page\n    // break is rendered; i.e., all cells of the row are rendered horizontally\n    this._rotated = 0;\n\n    // this is used to keep track of the starting y of the row to reset the cursor's y to\n    // this value for each cell (since they are horizontally aligned)\n    this._y = 0;\n\n    // on each page the row is rendered on, the row keeps track of the maximal y (or minimum\n    // in terms of PDF, because y 0 is on the bottom) a cell is rendered to, to be able to align\n    // the backgrounds of all cells to the same height\n    this._endY = null;\n    this._widths = [];\n    this._topBorderWidth = 0;\n    this._topBorderColor = 0x000000;\n    this._bottomBorderWidth = 0;\n    this._bottomBorderColor = 0x000000;\n    this._borderVerticalWidths = [];\n    this._borderVerticalColors = [];\n    this._minHeight = opts.minHeight || 0;\n    this._hasTopBorder = false;\n    this._insideBreak = false;\n    this._startRendering = null;\n  }\n\n  /// private API\n  _createClass(Row, [{\n    key: \"_pageBreak\",\n    value: function () {\n      var _pageBreak2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(level, insideBreak) {\n        var _iterator, _step, cell;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this._insideBreak = insideBreak;\n\n              // the pending queue looks as follows: [ [cell1], [cell2], ..., [celln], endRow]\n              // the currently rendered cell is at the head of the queue and therefore removed and\n              // re-inserted at the second last position\n              this._pending.splice(this._pending.length - 2, 0, this._pending.shift());\n\n              // test whether we have rotated all cells of the row\n              if (!(this._rotated < this._columns - 1)) {\n                _context.next = 7;\n                break;\n              }\n              this._rotated++;\n\n              // move to the next cell\n              this._nextColumn();\n              _context.next = 33;\n              break;\n            case 7:\n              // execute the pageBreak (rendering background, trigger retrospective page breaks, ...) of all\n              // already ended cells manually\n              _iterator = _createForOfIteratorHelper(this._endedCells);\n              _context.prev = 8;\n              _iterator.s();\n            case 10:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 18;\n                break;\n              }\n              cell = _step.value;\n              this._cursor.y = cell._cursor.bottom;\n              _context.next = 15;\n              return cell._pageBreak(level - 1, insideBreak);\n            case 15:\n              // pageBreak may add new callbacks to the cell's pending queue, which is however not anymore\n              // contained in the document's queue, therefor add these callbacks to the row's queue\n              while (cell._pending.length) {\n                this._pending.unshift(cell._pending.shift());\n              }\n            case 16:\n              _context.next = 10;\n              break;\n            case 18:\n              _context.next = 23;\n              break;\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](8);\n              _iterator.e(_context.t0);\n            case 23:\n              _context.prev = 23;\n              _iterator.f();\n              return _context.finish(23);\n            case 26:\n              _context.next = 28;\n              return this._drawBorders(true, insideBreak);\n            case 28:\n              // reset the rotation\n              this._rotated = 0;\n\n              // execute an actual page break\n              _context.next = 31;\n              return this._parent._pageBreak(level + 1, insideBreak);\n            case 31:\n              // store starting y to be able to align all cells horizontally\n              this._y = this._cursor.y;\n              this._endY = null;\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[8, 20, 23, 26]]);\n      }));\n      function _pageBreak(_x, _x2) {\n        return _pageBreak2.apply(this, arguments);\n      }\n      return _pageBreak;\n    }()\n  }, {\n    key: \"_nextColumn\",\n    value: function _nextColumn() {\n      // reset the current y back to the row start to align all cells horizontally\n      this._cursor.y = this._y;\n    }\n  }, {\n    key: \"_start\",\n    value: function () {\n      var _start2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this = this;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this._minHeight > 0 && !this._parent._cursor.doesFit(this._minHeight))) {\n                _context2.next = 3;\n                break;\n              }\n              _context2.next = 3;\n              return this._parent._pageBreak(1);\n            case 3:\n              // save start y of the row to be able to align all cells horizontally\n              this._y = this._cursor.y;\n\n              // block execution until the row knows about all its cells, otherwise it is possible that the\n              // rendering scheduler (_pending) removes this._pending before the cell's end got called\n              if (this._ended) {\n                _context2.next = 7;\n                break;\n              }\n              _context2.next = 7;\n              return new Promise(function (resolve) {\n                _this._startRendering = resolve;\n              });\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _start() {\n        return _start2.apply(this, arguments);\n      }\n      return _start;\n    }()\n  }, {\n    key: \"_end\",\n    value: function () {\n      var _end2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _iterator2, _step2, cell;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              // the actual end logic of cells has been postponed until here where it is called manually\n              _iterator2 = _createForOfIteratorHelper(this._endedCells);\n              _context3.prev = 1;\n              _iterator2.s();\n            case 3:\n              if ((_step2 = _iterator2.n()).done) {\n                _context3.next = 10;\n                break;\n              }\n              cell = _step2.value;\n              this._cursor.y = this._endY + cell.paddingBottom;\n              _context3.next = 8;\n              return Cell.prototype._end.call(cell);\n            case 8:\n              _context3.next = 3;\n              break;\n            case 10:\n              _context3.next = 15;\n              break;\n            case 12:\n              _context3.prev = 12;\n              _context3.t0 = _context3[\"catch\"](1);\n              _iterator2.e(_context3.t0);\n            case 15:\n              _context3.prev = 15;\n              _iterator2.f();\n              return _context3.finish(15);\n            case 18:\n              _context3.next = 20;\n              return this._drawBorders(false);\n            case 20:\n              // reset cursor\n              this._cursor.x = this._cursor.startX;\n              this._cursor.y = this._endY;\n            case 22:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[1, 12, 15, 18]]);\n      }));\n      function _end() {\n        return _end2.apply(this, arguments);\n      }\n      return _end;\n    }()\n  }, {\n    key: \"_begin\",\n    value: function _begin(ctx) {\n      Fragment.prototype._begin.call(this, ctx);\n    }\n  }, {\n    key: \"_drawBorders\",\n    value: function () {\n      var _drawBorders2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(isPageBreak, isInsideBreak) {\n        var hasBorder, chunk, y1, y2, left, borderWidth, borderColor, i, len, bw, bc, x, totalWidth, x1, x2, y, _y;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(isPageBreak && !isInsideBreak)) {\n                _context4.next = 3;\n                break;\n              }\n              this._hasTopBorder = true;\n              return _context4.abrupt(\"return\");\n            case 3:\n              // draw border\n              hasBorder = false;\n              chunk = ops.q(); // save graphics state\n              y1 = this._y;\n              y2 = isPageBreak ? this._cursor.bottom : this._endY;\n              left = this._cursor.startX;\n              borderWidth = 0;\n              borderColor = null;\n              if (this._borderVerticalWidths) {\n                for (i = 0, len = this._borderVerticalWidths.length; i < len; ++i) {\n                  // line width\n                  bw = this._borderVerticalWidths[i];\n                  if (bw > 0) {\n                    if (borderWidth !== bw) {\n                      chunk += ops.w(bw);\n                      borderWidth = bw;\n                    }\n\n                    // stroking color\n                    bc = this._borderVerticalColors[i];\n                    if (!borderColor || !util.rgbEqual(borderColor, bc)) {\n                      chunk += ops.SC(bc[0], bc[1], bc[2]);\n                      borderColor = bc;\n                    }\n\n                    // fill path\n                    x = left;\n                    if (i === 0) {\n                      x += bw / 2;\n                    } else if (i === len - 1) {\n                      x -= bw / 2;\n                    }\n                    chunk += ops.S(x, y1, \"m\", x, y2, \"l\");\n                  }\n                  left += this._widths[i];\n                }\n                hasBorder = true;\n              }\n              totalWidth = this._widths.reduce(function (lhs, rhs) {\n                return lhs + rhs;\n              }, 0);\n              x1 = this._cursor.startX;\n              x2 = x1 + totalWidth;\n              if (this._hasTopBorder && this._topBorderWidth > 0) {\n                this._hasTopBorder = false;\n\n                // line width\n                if (borderWidth !== this._topBorderWidth) {\n                  chunk += ops.w(this._topBorderWidth);\n                  borderWidth = this._topBorderWidth;\n                }\n\n                // stroking color\n                if (!borderColor || !util.rgbEqual(borderColor, this._topBorderColor)) {\n                  chunk += ops.SC(this._topBorderColor[0], this._topBorderColor[1], this._topBorderColor[2]);\n                  borderColor = this._topBorderColor;\n                }\n\n                // fill path\n                y = y1 - this._topBorderWidth / 2;\n                chunk += ops.S(x1, y, \"m\", x2, y, \"l\");\n                hasBorder = true;\n              }\n              if (!isPageBreak && this._bottomBorderWidth > 0) {\n                // line width\n                if (borderWidth !== this._bottomBorderWidth) {\n                  chunk += ops.w(this._bottomBorderWidth);\n                  borderWidth = this._bottomBorderWidth;\n                }\n\n                // stroking color\n                if (!borderColor || !util.rgbEqual(borderColor, this._bottomBorderColor)) {\n                  chunk += ops.SC(this._bottomBorderColor[0], this._bottomBorderColor[1], this._bottomBorderColor[2]);\n                  borderColor = this._bottomBorderColor;\n                }\n\n                // fill path\n                _y = y2 + this._bottomBorderWidth / 2;\n                chunk += ops.S(x1, _y, \"m\", x2, _y, \"l\");\n                hasBorder = true;\n              }\n              if (!hasBorder) {\n                _context4.next = 22;\n                break;\n              }\n              chunk += ops.Q(); // restore graphics state\n              _context4.next = 20;\n              return this._doc._startContentObject(null, true);\n            case 20:\n              _context4.next = 22;\n              return this._doc._write(chunk);\n            case 22:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function _drawBorders(_x3, _x4) {\n        return _drawBorders2.apply(this, arguments);\n      }\n      return _drawBorders;\n    }() /// public API\n  }, {\n    key: \"end\",\n    value: function end() {\n      if (this._columns !== this._widths.length) {\n        if (this._columns > this._widths.length) {\n          throw new Error(\"Row has \".concat(this.columns, \" cells but only \").concat(this._widths.length, \" columns\"));\n        }\n\n        // fill missing columns with empty cells\n        for (var i = this.columns; i < this._widths.length; ++i) {\n          this.cell();\n        }\n      }\n      if (this._startRendering) {\n        this._startRendering();\n      }\n      return Fragment.prototype.end.call(this);\n    }\n  }, {\n    key: \"cell\",\n    value: function cell(text, opts) {\n      // normalize arguments\n      if (text !== null && typeof text === \"object\") {\n        opts = text;\n        text = undefined;\n      }\n      if (!opts || typeof opts !== \"object\") {\n        opts = {};\n      }\n      opts = Object.assign({}, this.opts, opts);\n\n      // create cell and set cell's width according to row options\n      var column = this._columns++;\n      if (!(column in this._widths)) {\n        throw new Error(\"row columns already exceeded, cannot create another cell\");\n      }\n      if (opts.colspan > 1) {\n        for (var i = column + 1, len = column + opts.colspan; i < len; ++i) {\n          if (!(i in this._widths)) {\n            throw new Error(\"row columns already exceeded, colspan to big\");\n          }\n          this._widths[column] += this._widths[i];\n        }\n        this._widths.splice(column + 1, opts.colspan - 1);\n        if (this._borderVerticalWidths) {\n          this._borderVerticalWidths.splice(column + 1, opts.colspan - 1);\n        }\n      }\n      if (opts.minHeight > this._minHeight) {\n        this._minHeight = opts.minHeight;\n      }\n\n      // adjust cell padding to add enough space for borders\n      if (this._borderVerticalWidths) {\n        var borderWidthLeft = this._borderVerticalWidths[column];\n        var borderWidthRight = this._borderVerticalWidths[column + 1];\n        if (borderWidthLeft > 0) {\n          if (column === 0) {\n            // is first\n            opts.borderLeftWidth = borderWidthLeft;\n          } else {\n            opts.borderLeftWidth = borderWidthLeft / 2;\n          }\n        }\n        if (borderWidthRight > 0) {\n          if (column === this._widths.length - 1) {\n            // is last\n            opts.borderRightWidth = borderWidthRight;\n          } else {\n            opts.borderRightWidth = borderWidthRight / 2;\n          }\n        }\n      }\n      if (this._hasTopBorder && this._topBorderWidth > 0) {\n        opts.borderTopWidth = this._topBorderWidth;\n      }\n      if (this._bottomBorderWidth > 0) {\n        opts.borderBottomWidth = this._bottomBorderWidth;\n      }\n      var ctx = new Cell(this._doc, this, Object.assign({}, opts, {\n        width: this._widths[column]\n      }));\n      ctx._drawBorders = false;\n      this._begin(ctx);\n\n      // move the cell to the right by the width of each previous cell\n      for (var _i = 0; _i < column; ++_i) {\n        ctx._cursor.startX += this._widths[_i] || 0;\n      }\n      ctx._pending.push(function () {\n        return ctx._start();\n      });\n\n      // override cell's end logic, which is also postponed until the row ends\n      ctx._end = endCell.bind(ctx, this);\n      this._pending.push(ctx._pending);\n      if (typeof text === \"string\" && text.length > 0) {\n        ctx.text(text, opts);\n      }\n      return ctx;\n    }\n  }]);\n  return Row;\n}();\nfunction endCell(_x5) {\n  return _endCell.apply(this, arguments);\n}\nfunction _endCell() {\n  _endCell = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(row) {\n    var height;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          // apply bottom padding\n          this._cursor.y -= this.paddingBottom;\n          height = this._startY - this._cursor.y;\n          if (height < this.opts.minHeight) {\n            this._cursor.y -= this.opts.minHeight - height;\n          }\n\n          // decrease the counter of active cells\n          row._columns--;\n\n          // reset the parent property, to prevent endless recursion when the pageBreak handler of the\n          // cell is called later on\n          this._parent = null;\n\n          // keep track of the ended cell\n          row._endedCells.push(this);\n\n          // if, last row has been ended, trigger page break manually to continue with other cells on\n          // the next page\n          if (!(row._columns > 0 && row._rotated === row._columns)) {\n            _context5.next = 9;\n            break;\n          }\n          _context5.next = 9;\n          return row._pageBreak(2, row._insideBreak);\n        case 9:\n          // keep track of the ending y which is nearest to the page end\n          if (row._endY === null || this._cursor.y < row._endY) {\n            row._endY = this._cursor.y;\n          }\n          this._endLayerRef = this._doc._currentContent;\n\n          // move to the next cell\n          row._nextColumn();\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, this);\n  }));\n  return _endCell.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}