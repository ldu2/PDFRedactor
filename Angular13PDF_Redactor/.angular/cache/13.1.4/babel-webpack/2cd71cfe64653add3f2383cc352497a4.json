{"ast":null,"code":"\"use strict\";\n\n// Converts a hex color expr. like #123456 into an array [r, g, b],\n// where r, g, b are in the range of 0 and 1\nexports.colorToRgb = function (hex) {\n  if (hex === undefined || hex === null) {\n    return;\n  }\n  if (typeof hex === \"string\") {\n    hex = parseInt(hex.replace(\"#\", \"\"), 16);\n  }\n  var r = (hex >> 16) / 255;\n  var g = (hex >> 8 & 255) / 255;\n  var b = (hex & 255) / 255;\n  return [r, g, b];\n};\nexports.rgbEqual = function (lhs, rhs) {\n  return lhs && rhs && lhs[0] === rhs[0] && lhs[1] === rhs[1] && lhs[2] === rhs[2];\n};\nexports.toArrayBuffer = function (b) {\n  if (b instanceof ArrayBuffer) {\n    return b;\n  } else {\n    return b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);\n  }\n};\nexports.defaults = function (val, def) {\n  return val !== undefined ? val : def;\n};\nexports.inflate = function (obj) {\n  var filters = obj.properties.get(\"Filter\");\n  var filter;\n  if (filters && Array.isArray(filters)) {\n    filter = filters.shift();\n  } else {\n    filter = filters;\n    filters = [];\n  }\n  if (!filter || filter.name !== \"FlateDecode\" || filters.length > 0) {\n    throw new Error(\"Only FlateDecode filter are supported\");\n  }\n  var columns = 1;\n  var predictor = 1;\n  var params = obj.properties.get(\"DecodeParms\");\n  if (params) {\n    columns = params.get(\"Columns\");\n    predictor = params.get(\"Predictor\");\n  }\n  var inflate = require(\"pako/lib/inflate.js\").inflate;\n  var res = inflate(obj.content.content);\n  if (predictor === 1) {\n    return res;\n  }\n  if (predictor >= 10 && predictor <= 15) {\n    // PNG filter\n    res = pngFilter(res, columns);\n  } else {\n    throw new Error(\"Unsupported predictor \" + predictor);\n  }\n  return res;\n};\nfunction pngFilter(src, columns) {\n  var columnCount = columns + 1;\n  var rowCount = src.length / columnCount;\n  var res = new Uint8Array(columns * rowCount);\n  for (var y = 0; y < rowCount; ++y) {\n    var filter = src[y * columnCount];\n    if (filter === 0) {\n      for (var x = 0; x < columns; ++x) {\n        res[y * columns + x] = src[y * columnCount + 1 + x];\n      }\n    } else if (filter === 2) {\n      for (var _x = 0; _x < columns; _x++) {\n        var prev = y === 0 ? 0 : res[(y - 1) * columns + _x];\n        res[y * columns + _x] = prev + src[y * columnCount + 1 + _x] & 0xff;\n      }\n    } else {\n      throw new Error(\"Unsupported PNG filter \" + filter);\n    }\n  }\n  return res;\n}","map":null,"metadata":{},"sourceType":"script"}