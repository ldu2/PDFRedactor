{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\nvar _createClass = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\possibleConstructorReturn.js\").default;\nvar _isNativeReflectConstruct = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\isNativeReflectConstruct.js\").default;\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\getPrototypeOf.js\").default;\nvar _inherits = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\inherits.js\").default;\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nvar opentype = require(\"opentype.js\");\nvar FontSubset = require(\"./subset\");\nvar PDFName = require(\"../object/name\");\nvar PDFObject = require(\"../object/object\");\nvar PDFDictionary = require(\"../object/dictionary\");\nvar PDFString = require(\"../object/string\");\nvar PDFArray = require(\"../object/array\");\nvar PDFStream = require(\"../object/stream\");\nvar Base = require(\"./base\");\nvar StringWidth = Base.StringWidth;\nvar util = require(\"../util\");\nmodule.exports = /*#__PURE__*/function (_Base) {\n  _inherits(OTFFontFactory, _Base);\n  function OTFFontFactory(b) {\n    var _this;\n    _classCallCheck(this, OTFFontFactory);\n    _this = _callSuper(this, OTFFontFactory);\n\n    // convert to array buffer\n    var ab = util.toArrayBuffer(b);\n    _this.font = opentype.parse(ab);\n    return _this;\n  }\n  _createClass(OTFFontFactory, [{\n    key: \"instance\",\n    value: function instance() {\n      return new OTFFont(this.font, this);\n    }\n  }]);\n  return OTFFontFactory;\n}(Base);\nvar OTFFont = /*#__PURE__*/function () {\n  function OTFFont(font, parent) {\n    _classCallCheck(this, OTFFont);\n    this.font = font;\n    this.parent = parent;\n    this.subset = new FontSubset(this.font);\n    this.subset.use(\" \");\n  }\n  _createClass(OTFFont, [{\n    key: \"encode\",\n    value: function encode(str) {\n      this.subset.use(str);\n      return new PDFString(this.subset.encode(str)).toHexString();\n    }\n  }, {\n    key: \"stringWidth\",\n    value: function stringWidth(str, size) {\n      var scale = size / this.font.unitsPerEm;\n      var glyphs = this.font.stringToGlyphs(str);\n      var kerning = [];\n      var width = 0;\n      for (var i = 0, len = glyphs.length; i < len; ++i) {\n        var left = glyphs[i];\n        var right = glyphs[i + 1];\n        width += left.advanceWidth;\n        if (right) {\n          var offset = -this.font.getKerningValue(left, right);\n          if (offset !== 0) {\n            width += offset;\n            kerning.push({\n              pos: i + 1,\n              offset: offset\n            });\n          }\n        }\n      }\n      return new StringWidth(width * scale, kerning);\n    }\n  }, {\n    key: \"lineHeight\",\n    value: function lineHeight(size, includeGap) {\n      if (includeGap == null) {\n        includeGap = false;\n      }\n      var gap = includeGap ? this.font.tables.os2.sTypoLineGap : 0;\n      var ascent = this.font.tables.os2.sTypoAscender;\n      var descent = this.font.tables.os2.sTypoDescender;\n      return (ascent + gap - descent) * size / this.font.unitsPerEm;\n    }\n  }, {\n    key: \"ascent\",\n    value: function ascent(size) {\n      return this.font.tables.os2.sTypoAscender * size / this.font.unitsPerEm;\n    }\n  }, {\n    key: \"descent\",\n    value: function descent(size) {\n      return this.font.tables.os2.sTypoDescender * size / this.font.unitsPerEm;\n    }\n  }, {\n    key: \"underlinePosition\",\n    value: function underlinePosition(size) {\n      return this.font.tables.post.underlinePosition * size / this.font.unitsPerEm;\n    }\n  }, {\n    key: \"underlineThickness\",\n    value: function underlineThickness(size) {\n      return this.font.tables.post.underlineThickness * size / this.font.unitsPerEm;\n    }\n  }, {\n    key: \"write\",\n    value: function () {\n      var _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(doc, fontObj) {\n        var head, scaleFactor, flags, familyClass, isSerif, isFixedPitch, italicAngle, descriptor, descendant, metrics, codeMap, code, width, cmap, mapping, lines, _code, i, data, hex, file;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              head = this.font.tables.head;\n              scaleFactor = 1000.0 / this.font.unitsPerEm;\n              flags = 0;\n              familyClass = (this.font.tables.os2.sFamilyClass || 0) >> 8;\n              isSerif = !!~[1, 2, 3, 4, 5, 6, 7].indexOf(familyClass);\n              isFixedPitch = this.font.tables.post.isFixedPitch;\n              italicAngle = this.font.tables.post.italicAngle;\n              if (isFixedPitch) flags |= 1 << 0;\n              if (isSerif) flags |= 1 << 1;\n              if (familyClass === 10) flags |= 1 << 3;\n              if (italicAngle !== 0) flags |= 1 << 6;\n              /* assume not being symbolic */\n              flags |= 1 << 5;\n\n              // font descriptor\n              descriptor = new PDFObject(\"FontDescriptor\");\n              descriptor.prop(\"FontName\", this.subset.name);\n              descriptor.prop(\"Flags\", flags);\n              descriptor.prop(\"FontBBox\", new PDFArray([head.xMin * scaleFactor, head.yMin * scaleFactor, head.xMax * scaleFactor, head.yMax * scaleFactor]));\n              descriptor.prop(\"ItalicAngle\", italicAngle);\n              descriptor.prop(\"Ascent\", this.font.tables.os2.sTypoAscender * scaleFactor);\n              descriptor.prop(\"Descent\", this.font.tables.os2.sTypoDescender * scaleFactor);\n              descriptor.prop(\"CapHeight\", this.font.tables.os2.sCapHeight * scaleFactor);\n              descriptor.prop(\"XHeight\", this.font.tables.os2.sxHeight * scaleFactor);\n              descriptor.prop(\"StemV\", 0);\n              descendant = new PDFObject(\"Font\");\n              descendant.prop(\"Subtype\", \"CIDFontType0\");\n              descendant.prop(\"BaseFont\", this.font.names.postScriptName.en);\n              descendant.prop(\"DW\", 1000);\n              descendant.prop(\"CIDToGIDMap\", \"Identity\");\n              descendant.prop(\"CIDSystemInfo\", new PDFDictionary({\n                Ordering: new PDFString(\"Identity\"),\n                Registry: new PDFString(\"Adobe\"),\n                Supplement: 0\n              }));\n              descendant.prop(\"FontDescriptor\", descriptor.toReference());\n              fontObj.prop(\"Subtype\", \"Type0\");\n              fontObj.prop(\"BaseFont\", this.font.names.postScriptName.en);\n              fontObj.prop(\"Encoding\", \"Identity-H\");\n              fontObj.prop(\"DescendantFonts\", new PDFArray([descendant.toReference()]));\n\n              // widths array\n              metrics = [], codeMap = this.subset.cmap();\n              _context.t0 = _regeneratorRuntime().keys(codeMap);\n            case 35:\n              if ((_context.t1 = _context.t0()).done) {\n                _context.next = 44;\n                break;\n              }\n              code = _context.t1.value;\n              if (!(code < 32)) {\n                _context.next = 39;\n                break;\n              }\n              return _context.abrupt(\"continue\", 35);\n            case 39:\n              width = Math.round(this.subset.glyphs[code].advanceWidth * scaleFactor);\n              metrics.push(code - 31);\n              metrics.push(new PDFArray([width]));\n              _context.next = 35;\n              break;\n            case 44:\n              descendant.prop(\"W\", new PDFArray(metrics));\n\n              // unicode map\n              cmap = new PDFStream();\n              cmap.writeLine(\"/CIDInit /ProcSet findresource begin\");\n              cmap.writeLine(\"12 dict begin\");\n              cmap.writeLine(\"begincmap\");\n              cmap.writeLine(\"/CIDSystemInfo <<\");\n              cmap.writeLine(\"  /Registry (Adobe)\");\n              cmap.writeLine(\"  /Ordering (Identity)\");\n              cmap.writeLine(\"  /Supplement 0\");\n              cmap.writeLine(\">> def\");\n              cmap.writeLine(\"/CMapName /Identity-H\");\n              cmap.writeLine(\"/CMapType 2 def\");\n              cmap.writeLine(\"1 begincodespacerange\");\n              cmap.writeLine(\"<0000><ffff>\");\n              cmap.writeLine(\"endcodespacerange\");\n              mapping = this.subset.subset, lines = [];\n              _context.t2 = _regeneratorRuntime().keys(mapping);\n            case 61:\n              if ((_context.t3 = _context.t2()).done) {\n                _context.next = 69;\n                break;\n              }\n              _code = _context.t3.value;\n              if (!(_code < 32)) {\n                _context.next = 65;\n                break;\n              }\n              return _context.abrupt(\"continue\", 61);\n            case 65:\n              if (lines.length >= 100) {\n                cmap.writeLine(lines.length + \" beginbfchar\");\n                for (i = 0; i < lines.length; ++i) {\n                  cmap.writeLine(lines[i]);\n                }\n                cmap.writeLine(\"endbfchar\");\n                lines.length = 0;\n              }\n              lines.push(\"<\" + (\"0000\" + (+_code - 31).toString(16)).slice(-4) + \">\" +\n              // cid\n              \"<\" + (\"0000\" + mapping[_code].toString(16)).slice(-4) + \">\" // gid\n              );\n              _context.next = 61;\n              break;\n            case 69:\n              if (lines.length) {\n                cmap.writeLine(lines.length + \" beginbfchar\");\n                lines.forEach(function (line) {\n                  cmap.writeLine(line);\n                });\n                cmap.writeLine(\"endbfchar\");\n              }\n              cmap.writeLine(\"endcmap\");\n              cmap.writeLine(\"CMapName currentdict /CMap defineresource pop\");\n              cmap.writeLine(\"end\");\n              cmap.writeLine(\"end\");\n              fontObj.prop(\"ToUnicode\", cmap.toReference());\n\n              // font file\n              data = this.subset.save();\n              hex = ab2hex(data);\n              file = new PDFStream();\n              file.object.prop(\"Subtype\", \"OpenType\");\n              file.object.prop(\"Length\", hex.length + 1);\n              file.object.prop(\"Length1\", data.byteLength);\n              file.object.prop(\"Filter\", \"ASCIIHexDecode\");\n              file.content = hex + \">\\n\";\n              descriptor.prop(\"FontFile3\", file.toReference());\n              _context.next = 86;\n              return doc._writeObject(file);\n            case 86:\n              _context.next = 88;\n              return doc._writeObject(descriptor);\n            case 88:\n              _context.next = 90;\n              return doc._writeObject(descendant);\n            case 90:\n              _context.next = 92;\n              return doc._writeObject(cmap);\n            case 92:\n              _context.next = 94;\n              return doc._writeObject(fontObj);\n            case 94:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function write(_x, _x2) {\n        return _write.apply(this, arguments);\n      }\n      return write;\n    }()\n  }]);\n  return OTFFont;\n}();\nfunction toHex(n) {\n  if (n < 16) return \"0\" + n.toString(16);\n  return n.toString(16);\n}\nfunction ab2hex(ab) {\n  var view = new Uint8Array(ab);\n  var hex = \"\";\n  for (var i = 0, len = ab.byteLength; i < len; ++i) {\n    hex += toHex(view[i]);\n  }\n  return hex;\n}","map":null,"metadata":{},"sourceType":"script"}