{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\nvar _createClass = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\nvar PDFName = require(\"./name\");\nvar PDFValue = require(\"./value\");\nvar PDFDictionary = /*#__PURE__*/function () {\n  function PDFDictionary(dictionary) {\n    _classCallCheck(this, PDFDictionary);\n    this.dictionary = {};\n    if (dictionary) {\n      for (var key in dictionary) {\n        this.add(key, dictionary[key]);\n      }\n    }\n  }\n  _createClass(PDFDictionary, [{\n    key: \"add\",\n    value: function add(key, val) {\n      if (typeof val === \"string\") {\n        val = new PDFName(val);\n      }\n      this.dictionary[new PDFName(key)] = val;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, val) {\n      this.add(key, val);\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return String(new PDFName(key)) in this.dictionary;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this.dictionary[new PDFName(key)];\n    }\n  }, {\n    key: \"del\",\n    value: function del(key) {\n      delete this.dictionary[new PDFName(key)];\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      var length = 0;\n      for (var key in this.dictionary) {\n        length++;\n      }\n      return length;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var str = \"\";\n      for (var key in this.dictionary) {\n        var val = this.dictionary[key];\n        str += \"\".concat(key, \" \").concat(val === null ? \"null\" : val).replace(/^/gm, \"\\t\") + \"\\n\";\n      }\n      return \"<<\\n\".concat(str, \">>\");\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(xref, lexer, trial) {\n      if (lexer.getString(2) !== \"<<\") {\n        if (trial) {\n          return undefined;\n        }\n        throw new Error(\"Invalid dictionary\");\n      }\n      lexer.shift(2);\n      lexer.skipWhitespace(null, true);\n      var dictionary = new PDFDictionary();\n      while (lexer.getString(2) !== \">>\") {\n        var key = PDFName.parse(xref, lexer);\n        lexer.skipWhitespace(null, true);\n        var value = PDFValue.parse(xref, lexer);\n        dictionary.set(key, value);\n        lexer.skipWhitespace(null, true);\n      }\n      lexer.shift(2);\n      return dictionary;\n    }\n  }]);\n  return PDFDictionary;\n}();\nmodule.exports = PDFDictionary;","map":null,"metadata":{},"sourceType":"script"}