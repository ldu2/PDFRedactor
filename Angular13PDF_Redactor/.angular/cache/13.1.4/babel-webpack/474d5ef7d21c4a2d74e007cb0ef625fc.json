{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\nvar _createClass = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\possibleConstructorReturn.js\").default;\nvar _isNativeReflectConstruct = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\isNativeReflectConstruct.js\").default;\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\getPrototypeOf.js\").default;\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\assertThisInitialized.js\").default;\nvar _inherits = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\inherits.js\").default;\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nvar Fragment = require(\"./fragment\");\nvar util = require(\"./util\");\nvar ops = require(\"./ops\");\nmodule.exports = /*#__PURE__*/function (_Fragment) {\n  _inherits(Cell, _Fragment);\n  function Cell(doc, parent, opts) {\n    var _this;\n    _classCallCheck(this, Cell);\n    _this = _callSuper(this, Cell, [doc, parent]);\n    _this._pending = [];\n    _this._firstPage = true;\n    _this._firstRendered = false;\n    _this._drawBorders = true;\n\n    // create new cursor for cell context\n    // const previousCursor = this._cursor\n    _this._cursor = _this._cursor.clone();\n    applyOpts.call(_assertThisInitialized(_this), opts);\n    _this._previousStartX = _this._cursor.startX;\n    if (_this.x) {\n      _this._cursor.startX = _this.x;\n    }\n\n    // adjust cursor according to cell padding\n    _this._cursor.startX += _this.paddingLeft;\n    _this._cursor.width -= _this.paddingLeft + _this.paddingRight;\n    _this._cursor.bottomOffset = _this.paddingBottom - _this.borderBottomWidth;\n    _this._startRendering = null;\n    return _this;\n  }\n\n  /// private API\n  _createClass(Cell, [{\n    key: \"_pageBreak\",\n    value: function () {\n      var _pageBreak2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(level, insideBreak) {\n        var _this2 = this;\n        var renderHeight, actualHeight, contents, offset, idx, take;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              renderHeight = this._startY - this._cursor.bottom;\n              actualHeight = this._startY - this._cursor.y;\n              if (!(!insideBreak && this._firstPage && renderHeight / this._doc.height <= 0.15)) {\n                _context2.next = 9;\n                break;\n              }\n              // move already rendered cell content to the next page if the current cell height does only\n              // make up about 10% of the total page height\n              idx = this._doc._contents.indexOf(this._bgLayerRef);\n              take = this._endLayerRef ? this._doc._contents.indexOf(this._endLayerRef) - idx + 1 : this._doc._contents.length - idx;\n              contents = this._doc._contents.splice(idx, take);\n              offset = actualHeight - this.paddingTop + this.borderTopWidth;\n              _context2.next = 13;\n              break;\n            case 9:\n              // on page breaks, always draw background until the current bottom\n              this._cursor.y = this._cursor.bottom - this.paddingBottom;\n\n              // create background on each page break\n              _context2.next = 12;\n              return this._createBackground(!this._firstRendered, false);\n            case 12:\n              this._firstRendered = true;\n            case 13:\n              this._firstPage = false;\n              if (!this._parent) {\n                _context2.next = 17;\n                break;\n              }\n              _context2.next = 17;\n              return this._parent._pageBreak(level + 1, contents === undefined);\n            case 17:\n              // By pushing the following at the beginning of the cell's pending queue instead of executing\n              // it directly, we ensure that is executed just before the cell's content continues rendering\n              // on the next page - especially when cells are appended horizontally into rows.\n              this._pending.unshift( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      // reset some cursor values\n                      _this2._cursor.x = _this2._cursor.startX;\n                      _this2._cursor.cursorOffset = 0;\n                      if (!contents) {\n                        _context.next = 13;\n                        break;\n                      }\n                      _context.next = 5;\n                      return _this2._doc._startContentObject();\n                    case 5:\n                      _context.next = 7;\n                      return _this2._doc._write(ops.q() + ops.cm(1, 0, 0, 1, 0, _this2._cursor.y - _this2._startY));\n                    case 7:\n                      _this2._doc._contents.push.apply(_this2._doc._contents, contents);\n                      _context.next = 10;\n                      return _this2._doc._startContentObject();\n                    case 10:\n                      _context.next = 12;\n                      return _this2._doc._write(ops.Q());\n                    case 12:\n                      _this2._bgLayerRef = null;\n                    case 13:\n                      _this2._startY = _this2._cursor.y;\n                      if (offset > 0) {\n                        _this2._cursor.y -= offset;\n                      }\n\n                      // apply padding after page break (but only to most inner cell)\n                      if (level === 1) {\n                        _this2._cursor.y -= _this2.paddingTop - _this2.borderTopWidth;\n                        _this2._cursor.bottomOffset = _this2.paddingBottom - _this2.borderBottomWidth;\n                      }\n\n                      // TODO: is there a better way of achieving this?\n                      if (_this2._pending.length === 0) {\n                        _this2._cursor.y = _this2._startY;\n                      }\n                    case 17:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee);\n              })));\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _pageBreak(_x, _x2) {\n        return _pageBreak2.apply(this, arguments);\n      }\n      return _pageBreak;\n    }()\n  }, {\n    key: \"_createBackground\",\n    value: function () {\n      var _createBackground2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(hasTopBorder, hasBottomBorder) {\n        var hasBorder, layer, bgLayerIndex, height, bottom, chunk, borderColor, borderWidth, x, y1, y2, _x5, _y, _y2, x1, x2, y, _x6, _x7, _y3;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              // if there is no backgroundColor, it is not necessary to create the background layer\n              hasBorder = this._drawBorders && (this.borderTopWidth > 0 || this.borderRightWidth > 0 || this.borderBottomWidth > 0 || this.borderLeftWidth > 0);\n              if (!(!this.backgroundColor && !hasBorder)) {\n                _context3.next = 3;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 3:\n              _context3.next = 5;\n              return this._doc._startContentObject(null, true);\n            case 5:\n              // put the background layer behind the cell\n              layer = this._doc._contents.pop();\n              bgLayerIndex = this._bgLayerRef ? this._doc._contents.indexOf(this._bgLayerRef) : 0;\n              this._doc._contents.splice(bgLayerIndex, 0, layer);\n\n              // calculate background height\n              height = this._startY - this._cursor.y;\n              bottom = this._cursor.bottom - this.paddingBottom + this.borderBottomWidth;\n              if (this._startY - height < bottom) {\n                // if background height goes beyond bottom of document, trim it to the bottom\n                height = this._startY - bottom;\n              }\n              chunk = ops.q(); // save graphics state\n              if (this.backgroundColor) {\n                // write background\n                chunk += ops.sc(this.backgroundColor[0], this.backgroundColor[1], this.backgroundColor[2]) +\n                // non-stroking color\n                ops.re(this._cursor.startX - this.paddingLeft, this._startY - height, this.outerWidth, height) +\n                // rectangle\n                ops.f(); // fill path\n              }\n              if (this._drawBorders) {\n                borderColor = null;\n                borderWidth = null; // draw left border\n                if (this.borderLeftWidth > 0) {\n                  if (!borderColor || !util.rgbEqual(borderColor, this.borderLeftColor)) {\n                    chunk += ops.SC(this.borderLeftColor[0], this.borderLeftColor[1], this.borderLeftColor[2]); // stroking color\n                    borderColor = this.borderLeftColor;\n                  }\n                  if (borderWidth !== this.borderLeftWidth) {\n                    chunk += ops.w(this.borderLeftWidth); // line width\n                    borderWidth = this.borderLeftWidth;\n                  }\n                  x = this._cursor.startX - this.paddingLeft + this.borderLeftWidth / 2;\n                  y1 = this._startY;\n                  y2 = this._startY - height;\n                  chunk += ops.S(x, y1, \"m\", x, y2, \"l\"); // fill path\n                }\n\n                // draw right border\n                if (this.borderRightWidth > 0) {\n                  if (!borderColor || !util.rgbEqual(borderColor, this.borderRightColor)) {\n                    chunk += ops.SC(this.borderRightColor[0], this.borderRightColor[1], this.borderRightColor[2]); // stroking color\n                    borderColor = this.borderRightColor;\n                  }\n                  if (borderWidth !== this.borderRightWidth) {\n                    chunk += ops.w(this.borderRightWidth); // line width\n                    borderWidth = this.borderRightWidth;\n                  }\n                  _x5 = this._cursor.startX - this.paddingLeft + this.outerWidth - this.borderRightWidth / 2;\n                  _y = this._startY;\n                  _y2 = this._startY - height;\n                  chunk += ops.S(_x5, _y, \"m\", _x5, _y2, \"l\"); // fill path\n                }\n\n                // draw top border\n                if (hasTopBorder && this.borderTopWidth > 0) {\n                  if (!borderColor || !util.rgbEqual(borderColor, this.borderTopColor)) {\n                    chunk += ops.SC(this.borderTopColor[0], this.borderTopColor[1], this.borderTopColor[2]); // stroking color\n                    borderColor = this.borderTopColor;\n                  }\n                  if (borderWidth !== this.borderTopWidth) {\n                    chunk += ops.w(this.borderTopWidth); // line width\n                    borderWidth = this.borderTopWidth;\n                  }\n                  x1 = this._cursor.startX - this.paddingLeft;\n                  x2 = x1 + this.outerWidth;\n                  y = this._startY - this.borderTopWidth / 2;\n                  chunk += ops.S(x1, y, \"m\", x2, y, \"l\"); // fill path\n                }\n\n                // draw bottom border\n                if (hasBottomBorder && this.borderBottomWidth > 0) {\n                  if (!borderColor || !util.rgbEqual(borderColor, this.borderBottomColor)) {\n                    chunk += ops.SC(this.borderBottomColor[0], this.borderBottomColor[1], this.borderBottomColor[2]); // stroking color\n                    borderColor = this.borderBottomColor;\n                  }\n                  if (borderWidth !== this.borderBottomWidth) {\n                    chunk += ops.w(this.borderBottomWidth); // line width\n                    borderWidth = this.borderBottomWidth;\n                  }\n                  _x6 = this._cursor.startX - this.paddingLeft;\n                  _x7 = _x6 + this.outerWidth;\n                  _y3 = this._startY - height + this.borderBottomWidth / 2;\n                  chunk += ops.S(_x6, _y3, \"m\", _x7, _y3, \"l\"); // fill path\n                }\n              }\n              if (!(chunk.length > 0)) {\n                _context3.next = 18;\n                break;\n              }\n              chunk += ops.Q(); // restore graphics state\n              _context3.next = 18;\n              return this._doc._write(chunk);\n            case 18:\n              // for succeeding pages put background layers at index 0 (for bgLayerRef === null, index 0\n              // will be used)\n              this._bgLayerRef = null;\n\n              // update startAt to take page break into account\n              this._startY = this._cursor.startY;\n            case 20:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _createBackground(_x3, _x4) {\n        return _createBackground2.apply(this, arguments);\n      }\n      return _createBackground;\n    }()\n  }, {\n    key: \"_start\",\n    value: function () {\n      var _start2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _this3 = this;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (this._doc._currentContent) {\n                _context4.next = 3;\n                break;\n              }\n              _context4.next = 3;\n              return this._doc._startPage();\n            case 3:\n              if (!(this.minHeight > 0 && !this._parent._cursor.doesFit(this.minHeight))) {\n                _context4.next = 6;\n                break;\n              }\n              _context4.next = 6;\n              return this._parent._pageBreak(1);\n            case 6:\n              if (this.y !== undefined) {\n                this._cursor.y = this.y;\n              }\n\n              // Note: We could call `doesFit(this.minHeight)` here again to test whether the cell fits on the\n              // newly created page. However, instead of throwing an error, when the minHeight is greater than\n              // the document height, the minHeight is bounded to the documents height.\n\n              this._startY = this._cursor.y;\n              this._cursor.x = this._cursor.startX;\n              this._cursor.y -= this.paddingTop;\n              this.outerWidth = this._cursor.width + this.paddingLeft + this.paddingRight;\n\n              // start a new content layer for cells\n              // save the current layer ref, this will be used to place the background and border layer\n              // after the cell has been rendered\n              // Note: saving the index directly would  not work for nested rendering tasks\n              _context4.next = 13;\n              return this._doc._startContentObject(null, true);\n            case 13:\n              this._bgLayerRef = _context4.sent;\n              if (this._ended) {\n                _context4.next = 17;\n                break;\n              }\n              _context4.next = 17;\n              return new Promise(function (resolve) {\n                _this3._startRendering = resolve;\n              });\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function _start() {\n        return _start2.apply(this, arguments);\n      }\n      return _start;\n    }()\n  }, {\n    key: \"_end\",\n    value: function () {\n      var _end2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var height;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              // apply bottom padding\n              this._cursor.y -= this.paddingBottom;\n              height = this._startY - this._cursor.y;\n              if (height < this.opts.minHeight) {\n                this._cursor.y -= this.opts.minHeight - height;\n              }\n\n              // create final createBackground\n              _context5.next = 5;\n              return this._createBackground(!this._firstRendered, true);\n            case 5:\n              // restore cursor\n              this._cursor.x = this._previousStartX;\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function _end() {\n        return _end2.apply(this, arguments);\n      }\n      return _end;\n    }()\n  }, {\n    key: \"end\",\n    value: function end() {\n      if (this._startRendering) {\n        this._startRendering();\n      }\n      return Fragment.prototype.end.call(this);\n    }\n  }]);\n  return Cell;\n}(Fragment);\nfunction applyOpts(opts) {\n  this.opts = opts;\n  if (\"width\" in opts) {\n    this._cursor.width = opts.width;\n  }\n  if (\"x\" in opts) {\n    this.x = opts.x;\n  }\n  if (\"y\" in opts) {\n    this.y = opts.y;\n  }\n  this.paddingTop = opts.paddingTop || opts.padding || 0;\n  this.paddingRight = opts.paddingRight || opts.padding || 0;\n  this.paddingBottom = opts.paddingBottom || opts.padding || 0;\n  this.paddingLeft = opts.paddingLeft || opts.padding || 0;\n\n  // background creation callback\n  this.backgroundColor = util.colorToRgb(opts.backgroundColor);\n  this.borderTopWidth = opts.borderTopWidth || opts.borderWidth || 0;\n  this.borderTopColor = util.colorToRgb(opts.borderTopColor || opts.borderColor || 0x000000);\n  this.borderRightWidth = opts.borderRightWidth || opts.borderWidth || 0;\n  this.borderRightColor = util.colorToRgb(opts.borderRightColor || opts.borderColor || 0x000000);\n  this.borderBottomWidth = opts.borderBottomWidth || opts.borderWidth || 0;\n  this.borderBottomColor = util.colorToRgb(opts.borderBottomColor || opts.borderColor || 0x000000);\n  this.borderLeftWidth = opts.borderLeftWidth || opts.borderWidth || 0;\n  this.borderLeftColor = util.colorToRgb(opts.borderLeftColor || opts.borderColor || 0x000000);\n  this.paddingTop += this.borderTopWidth;\n  this.paddingRight += this.borderRightWidth;\n  this.paddingBottom += this.borderBottomWidth;\n  this.paddingLeft += this.borderLeftWidth;\n  this.minHeight = opts.minHeight || 0;\n}","map":null,"metadata":{},"sourceType":"script"}