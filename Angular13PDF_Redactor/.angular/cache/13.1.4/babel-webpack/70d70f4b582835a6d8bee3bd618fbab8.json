{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createForOfIteratorHelper.js\").default;\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\nvar _createClass = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\possibleConstructorReturn.js\").default;\nvar _isNativeReflectConstruct = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\isNativeReflectConstruct.js\").default;\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\getPrototypeOf.js\").default;\nvar _inherits = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\inherits.js\").default;\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nvar Fragment = require(\"./fragment\");\nvar util = require(\"./util\");\nvar ops = require(\"./ops\");\nvar PDF = require(\"./object\");\nmodule.exports = /*#__PURE__*/function (_Fragment) {\n  _inherits(Header, _Fragment);\n  function Header(doc, parent) {\n    var _this;\n    _classCallCheck(this, Header);\n    _this = _callSuper(this, Header, [doc, parent]);\n\n    // a header could consist out of multiple FormXObjects and this property is later used keep\n    // track of them\n    _this._objects = [];\n\n    // this array keeps track of all page numbers rendered in the header, because their rendering\n    // is postponed\n    _this._pageNumbers = [];\n\n    // create new cursor for header context to not inherite bottom offset of document, which the\n    // document receives from having a header\n    _this._cursor = _this._cursor.clone();\n    return _this;\n  }\n\n  /// private API\n\n  // prevent page breaks inside a header\n  _createClass(Header, [{\n    key: \"_pageBreak\",\n    value: function () {\n      var _pageBreak2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(level) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              throw new Error(\"Header is to long (tried to execute a page break inside the header)\");\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function _pageBreak(_x) {\n        return _pageBreak2.apply(this, arguments);\n      }\n      return _pageBreak;\n    }()\n  }, {\n    key: \"_start\",\n    value: function () {\n      var _start2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this._doc._endPage();\n            case 2:\n              _context2.next = 4;\n              return this._setup();\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _start() {\n        return _start2.apply(this, arguments);\n      }\n      return _start;\n    }()\n  }, {\n    key: \"_setup\",\n    value: function () {\n      var _setup2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              this._cursor.reset();\n\n              // these objects will be written to the document after all FormXObjects are written\n              // it is therefore necessary to keep track of them seperately\n              this._resources = new PDF.Object();\n              this._doc._registerObject(this._resources);\n              this._bbox = new PDF.Object();\n              this._doc._registerObject(this._bbox);\n\n              // a FormXObject will receive a Resources dictionary similar to Page objects, which is\n              // why it is necessary to keep track of used fonts and xobjects\n              this.fonts = new PDF.Dictionary({});\n              this.xobjects = new PDF.Dictionary({});\n\n              // this header object has a similar interface like the page object and it is used as such\n              // until the header has finished rendering (necessary to track the used fonts and xobjects)\n              this._doc._contentObjCreator = this._createObject.bind(this);\n\n              // close current content object and start a new one (by setting the _contentObjCreator object\n              // above, the new content object will be created by calling the header's _createObject\n              // method)\n              _context3.next = 10;\n              return this._doc._startContentObject();\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _setup() {\n        return _setup2.apply(this, arguments);\n      }\n      return _setup;\n    }()\n  }, {\n    key: \"_createObject\",\n    value: function _createObject() {\n      // this is going to be called on each _startContentObject() call as long as the header\n      // is rendered, which creates a FormXObject (instead of the usual plain object)\n      var xobj = new PDF.Object(\"XObject\");\n      xobj.prop(\"Subtype\", \"Form\");\n      xobj.prop(\"FormType\", 1);\n      xobj.prop(\"BBox\", this._bbox.toReference());\n      xobj.prop(\"Resources\", this._resources.toReference());\n      return xobj;\n    }\n\n    // while most parts of the header is static (i.e. rendered only once and then reused), there are\n    // some dynamic parts (e.g. page numbers) which are rendered on each page\n    // these parts are rendered here\n  }, {\n    key: \"_render\",\n    value: function () {\n      var _render2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _this2 = this;\n        var Text, _iterator, _step, _loop;\n        return _regeneratorRuntime().wrap(function _callee5$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(this._pageNumbers.length === 0)) {\n                _context6.next = 2;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 2:\n              // lazy load text, because of cyclic dependencies of Fragment\n              Text = require(\"./text\");\n              _iterator = _createForOfIteratorHelper(this._pageNumbers);\n              _context6.prev = 4;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var instance, withPageCount, lhs, rhs, fonts, font, fontAlias, xobj, currentPage, alias, txt;\n                return _regeneratorRuntime().wrap(function _loop$(_context5) {\n                  while (1) switch (_context5.prev = _context5.next) {\n                    case 0:\n                      instance = _step.value;\n                      withPageCount = false;\n                      if (instance.fn) {\n                        lhs = instance.fn(1, 1);\n                        rhs = instance.fn(1, 10);\n                        withPageCount = lhs.length !== rhs.length;\n                      }\n\n                      // postpone writing page number until the end of the document, because the total page count\n                      // is not known now\n                      if (!withPageCount) {\n                        _context5.next = 22;\n                        break;\n                      }\n                      // since there is only text with an already known font, the fonts dictionary can already\n                      // be build\n                      fonts = new PDF.Dictionary({});\n                      font = _this2._doc._fontInstance(instance.opts.font || _this2._doc.defaultFont);\n                      fontAlias = _this2._doc._fontAlias(font);\n                      fonts.set(fontAlias, _this2._doc._fonts[fontAlias].o.toReference());\n\n                      // create the FormXObject that is used to render the page numbers\n                      xobj = new PDF.Object(\"XObject\");\n                      xobj.prop(\"Subtype\", \"Form\");\n                      xobj.prop(\"FormType\", 1);\n                      xobj.prop(\"BBox\", new PDF.Array([instance.x, instance.y, instance.x + instance.width, instance.y - instance.height]));\n                      xobj.prop(\"Resources\", new PDF.Dictionary({\n                        ColorSpace: new PDF.Dictionary({\n                          CS1: new PDF.Array([new PDF.Name(\"ICCBased\"), _this2._doc._colorSpace.toReference()])\n                        }),\n                        ProcSet: new PDF.Array([new PDF.Name(\"Text\")]),\n                        Font: fonts\n                      }));\n                      _this2._doc._registerObject(xobj);\n\n                      // calculate the number of the currently rendered page\n                      currentPage = _this2._doc._pages.length; // add a handler to the document that will be called when the document is finished up\n                      // this is necessary because the total count of pages is not yet known\n                      _this2._doc._finalize.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n                        var pageCount, str, txt;\n                        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                          while (1) switch (_context4.prev = _context4.next) {\n                            case 0:\n                              _context4.next = 2;\n                              return _this2._doc._startContentObject(xobj);\n                            case 2:\n                              // setup the cursor to the position the page numbers should be rendered at\n                              _this2._cursor.y = instance.y;\n                              _this2._cursor.x = instance.x;\n                              _this2._cursor.width = instance.width;\n\n                              // negate document bottomOffset, which is there because of this header\n                              _this2._cursor.bottomOffset = -_this2._doc._cursor.bottomOffset;\n\n                              // create the text representing the page numbers\n                              pageCount = _this2._doc._pages.length;\n                              str = instance.fn ? instance.fn(currentPage, pageCount) : currentPage; // manually render the text\n                              txt = new Text(_this2._doc, _this2, instance.opts);\n                              txt._parts++;\n                              txt._ended = true;\n                              _context4.next = 13;\n                              return txt._start();\n                            case 13:\n                              _context4.next = 15;\n                              return txt._render(str, instance.opts);\n                            case 15:\n                              _context4.next = 17;\n                              return txt._end();\n                            case 17:\n                              _context4.next = 19;\n                              return _this2._doc._endContentObject();\n                            case 19:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }, _callee4);\n                      })));\n\n                      // render and register the FormXObject to the current page\n                      alias = new PDF.Name(_this2._doc._aliases.next(\"X\"));\n                      _this2._doc._currentContent._xobjects[alias] = xobj.toReference();\n                      _context5.next = 20;\n                      return _this2._doc._write(ops.Do(alias));\n                    case 20:\n                      _context5.next = 35;\n                      break;\n                    case 22:\n                      // if there is now total page count necessary, we can write the current page number directly\n                      _this2._cursor.y = instance.y;\n                      _this2._cursor.x = instance.x;\n                      _this2._cursor.width = instance.width;\n\n                      // negate document bottomOffset, which is there because of this header\n                      _this2._cursor.bottomOffset = -_this2._doc._cursor.bottomOffset;\n                      txt = new Text(_this2._doc, _this2, instance.opts);\n                      txt._parts++;\n                      txt._ended = true;\n                      _context5.next = 31;\n                      return txt._start();\n                    case 31:\n                      _context5.next = 33;\n                      return txt._render(String(_this2._doc._pages.length), instance.opts);\n                    case 33:\n                      _context5.next = 35;\n                      return txt._end();\n                    case 35:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }, _loop);\n              });\n              _iterator.s();\n            case 7:\n              if ((_step = _iterator.n()).done) {\n                _context6.next = 11;\n                break;\n              }\n              return _context6.delegateYield(_loop(), \"t0\", 9);\n            case 9:\n              _context6.next = 7;\n              break;\n            case 11:\n              _context6.next = 16;\n              break;\n            case 13:\n              _context6.prev = 13;\n              _context6.t1 = _context6[\"catch\"](4);\n              _iterator.e(_context6.t1);\n            case 16:\n              _context6.prev = 16;\n              _iterator.f();\n              return _context6.finish(16);\n            case 19:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee5, this, [[4, 13, 16, 19]]);\n      }));\n      function _render() {\n        return _render2.apply(this, arguments);\n      }\n      return _render;\n    }()\n  }, {\n    key: \"_end\",\n    value: function () {\n      var _end2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var _iterator2, _step2, content, alias, _alias;\n        return _regeneratorRuntime().wrap(function _callee6$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              // save the height of the header\n              // this is used to correctly offset the cursor when rendering the page\n              this.height = this._doc._cursor.startY - this._doc._cursor.y;\n              _context7.next = 3;\n              return this._doc._endContentObject();\n            case 3:\n              // collect all fonts and xobjects that are used in the header\n              _iterator2 = _createForOfIteratorHelper(this._doc._contents);\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  content = _step2.value;\n                  for (alias in content._fonts) {\n                    this.fonts.add(alias, content._fonts[alias]);\n                  }\n                  for (_alias in content._xobjects) {\n                    this.xobjects.add(_alias, content._xobjects[_alias]);\n                  }\n                }\n\n                // create the Resources object for the header's FormXObjects\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n              this._resources.content = new PDF.Dictionary({\n                ColorSpace: new PDF.Dictionary({\n                  CS1: new PDF.Array([new PDF.Name(\"ICCBased\"), this._doc._colorSpace.toReference()])\n                }),\n                ProcSet: new PDF.Array([new PDF.Name(\"PDF\"), new PDF.Name(\"Text\"), new PDF.Name(\"ImageB\"), new PDF.Name(\"ImageC\"), new PDF.Name(\"ImageI\")]),\n                Font: this.fonts,\n                XObject: this.xobjects\n              });\n              _context7.next = 8;\n              return this._doc._writeObject(this._resources);\n            case 8:\n              // setup the BBox\n              this._bbox.content = new PDF.Array([this._cursor.startX, this._cursor.startY, this._cursor.startX + this._doc._cursor.width, this._doc._cursor.y]);\n              _context7.next = 11;\n              return this._doc._writeObject(this._bbox);\n            case 11:\n              // the header can consist out of multiple FormXObjects, which are collected here\n              this._objects = this._doc._contents.map(function (c) {\n                return c._object;\n              });\n\n              // reset everything\n              this._doc._cursor.reset();\n              this._doc._currentContent = null;\n              this._doc._contents.length = 0;\n              this._doc._contentObjCreator = null;\n              this._cursor.y -= this.height;\n            case 17:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee6, this);\n      }));\n      function _end() {\n        return _end2.apply(this, arguments);\n      }\n      return _end;\n    }() /// public API\n  }, {\n    key: \"pageNumber\",\n    value: function pageNumber(fn, opts) {\n      var _this3 = this;\n      if (typeof fn === \"object\") {\n        opts = fn;\n        fn = undefined;\n      }\n      if (!opts || typeof opts !== \"object\") {\n        opts = {};\n      }\n      var font = this._doc._fontInstance(opts.font || this._doc.defaultFont);\n      var fontSize = opts.fontSize || this._doc.defaultFontSize;\n      var lineHeight = opts.lineHeight || this._doc.defaultLineHeight;\n      var height = font.lineHeight(fontSize, true) * lineHeight;\n      var descent = -font.descent(fontSize) * lineHeight;\n      this._begin(null);\n      this._pending.push(function () {\n        _this3._pageNumbers.push({\n          y: _this3._cursor.y,\n          x: _this3._cursor.x,\n          width: _this3._cursor.width,\n          height: height + descent,\n          opts: opts,\n          fn: fn\n        });\n        _this3._cursor.y -= height + descent;\n        return Promise.resolve();\n      });\n    }\n  }]);\n  return Header;\n}(Fragment);","map":null,"metadata":{},"sourceType":"script"}