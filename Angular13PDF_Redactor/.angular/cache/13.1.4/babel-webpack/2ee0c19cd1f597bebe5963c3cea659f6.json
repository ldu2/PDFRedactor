{"ast":null,"code":"'use strict';\n\nvar _createClass = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\nvar _classCallCheck = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\nvar UnicodeTrie = require('unicode-trie');\nvar ref = require('./classes');\nvar _require = require('./classes'),\n  BK = _require.BK,\n  CR = _require.CR,\n  LF = _require.LF,\n  NL = _require.NL,\n  CB = _require.CB,\n  BA = _require.BA,\n  SP = _require.SP,\n  WJ = _require.WJ,\n  AI = _require.AI,\n  AL = _require.AL,\n  SA = _require.SA,\n  SG = _require.SG,\n  XX = _require.XX,\n  CJ = _require.CJ,\n  ID = _require.ID,\n  NS = _require.NS,\n  characterClasses = _require.characterClasses;\nvar _require2 = require('./pairs'),\n  DI_BRK = _require2.DI_BRK,\n  IN_BRK = _require2.IN_BRK,\n  CI_BRK = _require2.CI_BRK,\n  CP_BRK = _require2.CP_BRK,\n  PR_BRK = _require2.PR_BRK,\n  pairTable = _require2.pairTable;\nvar classTrie = new UnicodeTrie(hex2ab(require('./classes.json').buf));\nvar Break = /*#__PURE__*/_createClass(function Break(position, required) {\n  _classCallCheck(this, Break);\n  this.position = position;\n  this.required = required != null ? required : false;\n});\nmodule.exports = /*#__PURE__*/function () {\n  function LineBreaker(string) {\n    _classCallCheck(this, LineBreaker);\n    this.string = string;\n    this.pos = 0;\n    this.lastPos = 0;\n    this.curClass = null;\n    this.nextClass = null;\n  }\n  _createClass(LineBreaker, [{\n    key: \"nextCodePoint\",\n    value: function nextCodePoint() {\n      var code = this.string.charCodeAt(this.pos++);\n      var next = this.string.charCodeAt(this.pos);\n\n      // If a surrogate pair\n      if (0xd800 <= code && code <= 0xdbff && 0xdc00 <= next && next <= 0xdfff) {\n        this.pos++;\n        return (code - 0xd800) * 0x400 + (next - 0xdc00) + 0x10000;\n      }\n      return code;\n    }\n  }, {\n    key: \"nextCharClass\",\n    value: function nextCharClass(first) {\n      if (first == null) {\n        first = false;\n      }\n      return mapClass(classTrie.get(this.nextCodePoint()));\n    }\n  }, {\n    key: \"nextBreak\",\n    value: function nextBreak() {\n      // get the first char if we're at the beginning of the string\n      if (this.curClass == null) {\n        this.curClass = mapFirst(this.nextCharClass());\n      }\n      while (this.pos < this.string.length) {\n        this.lastPos = this.pos;\n        var lastClass = this.nextClass;\n        this.nextClass = this.nextCharClass();\n\n        // explicit newline\n        if (this.curClass === BK || this.curClass === CR && this.nextClass !== LF) {\n          this.curClass = mapFirst(mapClass(this.nextClass));\n          return new Break(this.lastPos, true);\n        }\n\n        // handle classes not handled by the pair table\n        var cur = null;\n        switch (this.nextClass) {\n          case SP:\n            cur = this.curClass;\n            break;\n          case BK:\n          case LF:\n          case NL:\n            cur = BK;\n            break;\n          case CR:\n            cur = CR;\n            break;\n          case CB:\n            cur = BA;\n            break;\n        }\n        if (cur != null) {\n          this.curClass = cur;\n          if (this.nextClass === CB) {\n            return new Break(this.lastPos);\n          }\n          continue;\n        }\n\n        // if not handled already, use the pair table\n        var shouldBreak = false;\n        switch (pairTable[this.curClass][this.nextClass]) {\n          case DI_BRK:\n            // Direct break\n            shouldBreak = true;\n            break;\n          case IN_BRK:\n            // possible indirect break\n            shouldBreak = lastClass === SP;\n            break;\n          case CI_BRK:\n            // prohibited for combining marks\n            shouldBreak = lastClass === SP;\n            if (!shouldBreak) {\n              continue;\n            }\n            break;\n          case CP_BRK:\n            if (lastClass !== SP) {\n              continue;\n            }\n        }\n        this.curClass = this.nextClass;\n        if (shouldBreak) {\n          return new Break(this.lastPos);\n        }\n      }\n      if (this.pos >= this.string.length) {\n        if (this.lastPos < this.string.length) {\n          this.lastPos = this.string.length;\n          return new Break(this.string.length);\n        } else {\n          return null;\n        }\n      }\n    }\n  }]);\n  return LineBreaker;\n}();\nfunction mapClass(c) {\n  switch (c) {\n    case AI:\n      return AL;\n    case SA:\n    case SG:\n    case XX:\n      return AL;\n    case CJ:\n      return NS;\n    default:\n      return c;\n  }\n}\nfunction mapFirst(c) {\n  switch (c) {\n    case LF:\n    case NL:\n      return BK;\n    case CB:\n      return BA;\n    case SP:\n      return WJ;\n    default:\n      return c;\n  }\n}\nfunction hex2ab(hex) {\n  var view = new Uint8Array(hex.length / 2);\n  for (var i = 0; i < hex.length; i += 2) {\n    view[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n  }\n  return view;\n}","map":null,"metadata":{},"sourceType":"script"}