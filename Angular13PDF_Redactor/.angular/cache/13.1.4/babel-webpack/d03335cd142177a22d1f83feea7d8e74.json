{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { ElementRef, NgZone } from '@angular/core';\nimport * as PDFJS from 'pdfjs';\nimport { jsPDF } from 'jspdf';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./drop-zone/drop-zone.component\";\nvar _c0 = [\"myCanvas\"];\nexport var RedactorComponent = /*#__PURE__*/(function () {\n  var RedactorComponent = /*#__PURE__*/function () {\n    function RedactorComponent(ngZone) {\n      _classCallCheck(this, RedactorComponent);\n      this.ngZone = ngZone;\n      this.__PAGE_RENDERING_IN_PROGRESS = 0;\n      this.img = new Image();\n      this.buff = [];\n      this.storedRects = []; // so far we only deal with single page editor, if multipaged. we will need to update\n      // to update the redo and undo structure, with multi buffs, or we just commit the change, and forget about re-editing\n      this.allPages = [];\n      this.show = false;\n      this.refresh = true;\n      this.mouse = {\n        button: false,\n        x: 0,\n        y: 0,\n        down: false,\n        up: false,\n        that: this,\n        event: function event(e) {\n          var rectCanv = this.that.__CANVAS.nativeElement.getBoundingClientRect();\n          var m = this.that.mouse;\n          m.x = (e.clientX - rectCanv.left) / (rectCanv.right - rectCanv.left) * this.that.__CANVAS.nativeElement.width;\n          m.y = (e.clientY - rectCanv.top) / (rectCanv.bottom - rectCanv.top) * this.that.__CANVAS.nativeElement.height;\n          var prevButton = m.button;\n          m.button = e.type === 'mousedown' ? true : e.type === 'mouseup' ? false : this.that.mouse.button;\n          if (!prevButton && m.button) {\n            m.down = true;\n          }\n          if (prevButton && !m.button) {\n            m.up = true;\n          }\n        }\n      };\n      var that = this;\n      this.ngZone.runOutsideAngular(function () {\n        requestAnimationFrame(mainLoop);\n        function mainLoop() {\n          that.refresh = true;\n          if (that.refresh || that.mouse.down || that.mouse.up || that.mouse.button) {\n            that.refresh = false;\n            if (that.mouse.down) {\n              that.mouse.down = false;\n              that.rectT.restart(that.mouse);\n            } else if (that.mouse.button) {\n              that.rectT.update(that.mouse);\n            } else if (that.mouse.up) {\n              that.mouse.up = false;\n              that.rectT.update(that.mouse);\n              var tempRect = that.rectT.toRect();\n              var m = that.mouse;\n              if (isFinite(tempRect.x) && isFinite(tempRect.y) && isFinite(tempRect.w) && isFinite(tempRect.h) && tempRect.w !== 0 && tempRect.h !== 0 // only if the mouse land in the canvas,ok\n              && m.x > 0 && m.x < that.__CANVAS.nativeElement.width && m.y > 0 && m.y < that.__CANVAS.nativeElement.height) {\n                that.storedRects.push(tempRect);\n                that.buff = []; // once the editor start to edit, the editor commits to the change so far, so redo is emptied out\n                var canv = document.createElement('canvas');\n                var canv_con = canv.getContext('2d');\n                canv.width = that.__CANVAS_CTX.canvas.width;\n                canv.height = that.__CANVAS_CTX.canvas.height;\n                canv_con.drawImage(that.__CANVAS.nativeElement, 0, 0, that.__CANVAS_CTX.canvas.width, that.__CANVAS_CTX.canvas.height);\n                that.allPages[that.__CURRENT_PAGE - 1] = canv;\n              }\n            }\n            that.draw();\n          }\n          requestAnimationFrame(mainLoop);\n        }\n      });\n    }\n    _createClass(RedactorComponent, [{\n      key: \"rect\",\n      value: function rect() {\n        var x1, y1, x2, y2;\n        var show = false;\n        var rectT = {\n          x: 0,\n          y: 0,\n          w: 0,\n          h: 0,\n          draw: draw\n        };\n        function fix() {\n          rectT.x = Math.min(x1, x2);\n          rectT.y = Math.min(y1, y2);\n          rectT.w = Math.max(x1, x2) - Math.min(x1, x2);\n          rectT.h = Math.max(y1, y2) - Math.min(y1, y2);\n        }\n        function draw(ctx) {\n          ctx.fillRect(this.x, this.y, this.w, this.h);\n        }\n        var API = {\n          restart: function restart(point) {\n            x2 = x1 = point.x;\n            y2 = y1 = point.y;\n            fix();\n            show = true;\n          },\n          update: function update(point) {\n            x2 = point.x;\n            y2 = point.y;\n            fix();\n            show = true;\n          },\n          toRect: function toRect() {\n            show = false;\n            return Object.assign({}, rectT);\n          },\n          draw: function draw(ctx) {\n            if (show) {\n              rectT.draw(ctx);\n            }\n          },\n          show: false\n        };\n        return API;\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        this.show = false;\n        this.__CANVAS_CTX = this.__CANVAS.nativeElement.getContext('2d');\n        this.rectT = this.rect();\n      }\n      // Upon click this should should trigger click on the #file-to-upload file input element\n      // This is better than showing the not-good-looking file input element\n    }, {\n      key: \"uploadFile\",\n      value: function uploadFile() {\n        this.cleanCanvas();\n        this.showPDF('http://localhost:4200/assets/test2.pdf');\n        this.show = true;\n      }\n      // Previous action on the PDF\n    }, {\n      key: \"undoAction\",\n      value: function undoAction() {\n        if (this.storedRects.length > 0) {\n          this.buff.push(this.storedRects.pop());\n        }\n      }\n      // Next action on the PDF\n    }, {\n      key: \"redoAction\",\n      value: function redoAction() {\n        if (this.buff.length > 0) {\n          this.storedRects.push(this.buff.pop());\n        }\n      }\n      // Previous page of the PDF\n    }, {\n      key: \"prevPage\",\n      value: function prevPage() {\n        if (this.__CURRENT_PAGE !== 1) {\n          this.cleanCanvas();\n          this.showPage(--this.__CURRENT_PAGE, true);\n        }\n      }\n      // Next page of the PDF\n    }, {\n      key: \"nextPage\",\n      value: function nextPage() {\n        if (this.__CURRENT_PAGE !== this.__TOTAL_PAGES) {\n          this.cleanCanvas();\n          this.showPage(++this.__CURRENT_PAGE, true);\n        }\n      }\n      // Download button\n    }, {\n      key: \"downloadFile\",\n      value: function downloadFile() {\n        var width = this.__CANVAS.nativeElement.width;\n        var height = this.__CANVAS.nativeElement.height;\n        var pdf = null;\n        // set the height and width for the output pdf file\n        if (width > height) {\n          pdf = new jsPDF('l', 'px', [width, height]);\n        } else {\n          pdf = new jsPDF('p', 'px', [height, width]);\n        }\n        width = pdf.internal.pageSize.getWidth();\n        height = pdf.internal.pageSize.getHeight();\n        for (var i = 0; i < this.allPages.length; i++) {\n          pdf.addImage(this.allPages[i], 'PNG', 0, 0, width, height);\n          if (i < this.allPages.length - 1) {\n            pdf.addPage(); // this adds a new page\n          }\n        }\n        pdf.save('download.pdf');\n      }\n    }, {\n      key: \"showPDF\",\n      value: function showPDF(pdf_url) {\n        var that = this;\n        PDFJS.getDocument(pdf_url).promise.then(function (pdf_doc) {\n          that.__PDF_DOC = pdf_doc;\n          that.__TOTAL_PAGES = that.__PDF_DOC.numPages;\n          that.showPage(1, false);\n          that.preloadAllPages();\n        }).catch(function (error) {\n          alert(error.message);\n        });\n      }\n    }, {\n      key: \"showPage\",\n      value: function showPage(page_no, prev) {\n        this.storedRects = [];\n        this.buff = [];\n        this.__PAGE_RENDERING_IN_PROGRESS = 1;\n        this.__CURRENT_PAGE = page_no;\n        // Fetch the page\n        var that = this;\n        this.__PDF_DOC.getPage(page_no).then(function (page) {\n          var width = window.screen.availWidth - 50;\n          // As the canvas is of a fixed width we need to set the scale of the viewport accordingly\n          var scale_required = width / page.getViewport(1).width;\n          // Get viewport of the page at required scale //the scale is the % in the pdf file\n          var viewport = page.getViewport(scale_required);\n          // Set canvas width\n          // Set canvas height\n          that.__CANVAS.nativeElement.width = width;\n          that.__CANVAS.nativeElement.height = viewport.height;\n          var renderContext = {\n            canvasContext: that.__CANVAS_CTX,\n            viewport: viewport\n          };\n          // Render the page contents in the canvas\n          page.render(renderContext).then(function () {\n            that.__PAGE_RENDERING_IN_PROGRESS = 0;\n            if (prev) {\n              console.log(page_no);\n              that.img.src = that.allPages[page_no - 1].toDataURL();\n            } else {\n              that.img.src = that.__CANVAS.nativeElement.toDataURL();\n            }\n          });\n        });\n      }\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        var _this = this;\n        this.__CANVAS_CTX.drawImage(this.img, 0, 0, this.__CANVAS_CTX.canvas.width, this.__CANVAS_CTX.canvas.height);\n        this.__CANVAS_CTX.lineWidth = 1;\n        this.__CANVAS_CTX.strokeStyle = 'black';\n        this.storedRects.forEach(function (rect2) {\n          return rect2.draw(_this.__CANVAS_CTX);\n        });\n        this.__CANVAS_CTX.strokeStyle = 'red';\n        this.rectT.draw(this.__CANVAS_CTX);\n      }\n    }, {\n      key: \"cleanCanvas\",\n      value: function cleanCanvas() {\n        this.__CANVAS_CTX.clearRect(0, 0, this.__CANVAS_CTX.canvas.width, this.__CANVAS_CTX.canvas.height);\n        this.img.src = this.__CANVAS.nativeElement.toDataURL();\n      }\n    }, {\n      key: \"captureFile\",\n      value: function captureFile($event) {\n        this.cleanCanvas();\n        this.showPDF($event);\n        this.show = true;\n      }\n    }, {\n      key: \"removeFile\",\n      value: function removeFile($event) {\n        this.show = false;\n      }\n    }, {\n      key: \"preloadAllPages\",\n      value: function preloadAllPages() {\n        this.allPages = [];\n        var that = this;\n        for (var i = 1; i <= this.__TOTAL_PAGES; i++) {\n          this.__PDF_DOC.getPage(i).then(function (page) {\n            var width = window.screen.availWidth - 50;\n            // As the canvas is of a fixed width we need to set the scale of the viewport accordingly\n            var scale_required = width / page.getViewport(1).width;\n            // Get viewport of the page at required scale //the scale is the % in the pdf file\n            var viewport = page.getViewport(scale_required);\n            var canv = document.createElement('canvas');\n            var canv_con = canv.getContext('2d');\n            // Set canvas width\n            // Set canvas height\n            canv.width = width;\n            canv.height = viewport.height;\n            var renderContext = {\n              canvasContext: canv_con,\n              viewport: viewport\n            };\n            // Render the page contents in the canvas\n            page.render(renderContext).then(function () {\n              that.allPages.push(canv);\n            });\n          });\n        }\n      }\n    }]);\n    return RedactorComponent;\n  }();\n  RedactorComponent.ɵfac = function RedactorComponent_Factory(t) {\n    return new (t || RedactorComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  RedactorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RedactorComponent,\n    selectors: [[\"app-redactor\"]],\n    viewQuery: function RedactorComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        var _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.__CANVAS = _t.first);\n      }\n    },\n    decls: 32,\n    vars: 19,\n    consts: [[2, \"text-align\", \"center\"], [1, \"pdf-buttons\"], [\"id\", \"pdf-prev\", 3, \"click\"], [\"id\", \"pdf-next\", 3, \"click\"], [\"id\", \"download-image\", 3, \"disabled\", \"click\"], [\"id\", \"upload-button\", 3, \"click\"], [3, \"fileEvent\", \"removeFileEvent\"], [\"id\", \"pdf-main-container\", 3, \"mousedown\", \"mouseup\", \"mousemove\"], [\"id\", \"pdf-contents\"], [\"id\", \"pdf-loader\"], [\"id\", \"pdf-meta\"], [\"id\", \"pdf-undo\", 3, \"click\"], [\"id\", \"pdf-redo\", 3, \"click\"], [\"id\", \"page-count-container\"], [\"id\", \"pdf-current-page\"], [\"id\", \"pdf-total-pages\"], [\"id\", \"canvas-container\"], [\"myCanvas\", \"\"]],\n    template: function RedactorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\", 0);\n        i0.ɵɵtext(1, \"PDF File Redactor\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\")(3, \"div\", 1)(4, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function RedactorComponent_Template_button_click_4_listener() {\n          return ctx.prevPage();\n        });\n        i0.ɵɵtext(5, \"Previous\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function RedactorComponent_Template_button_click_6_listener() {\n          return ctx.nextPage();\n        });\n        i0.ɵɵtext(7, \"Next\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function RedactorComponent_Template_button_click_8_listener() {\n          return ctx.downloadFile();\n        });\n        i0.ɵɵtext(9, \"Download PDF\\n\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\", 0)(11, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function RedactorComponent_Template_button_click_11_listener() {\n          return ctx.uploadFile();\n        });\n        i0.ɵɵtext(12, \"Select PDF\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"app-drop-zone\", 6);\n        i0.ɵɵlistener(\"fileEvent\", function RedactorComponent_Template_app_drop_zone_fileEvent_13_listener($event) {\n          return ctx.captureFile($event);\n        })(\"removeFileEvent\", function RedactorComponent_Template_app_drop_zone_removeFileEvent_13_listener($event) {\n          return ctx.removeFile($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\", 7);\n        i0.ɵɵlistener(\"mousedown\", function RedactorComponent_Template_div_mousedown_14_listener($event) {\n          return ctx.mouse.event($event);\n        })(\"mouseup\", function RedactorComponent_Template_div_mouseup_14_listener($event) {\n          return ctx.mouse.event($event);\n        })(\"mousemove\", function RedactorComponent_Template_div_mousemove_14_listener($event) {\n          return ctx.mouse.event($event);\n        });\n        i0.ɵɵelementStart(15, \"div\", 8)(16, \"div\", 9);\n        i0.ɵɵtext(17, \"Loading document ...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 10)(19, \"div\", 1)(20, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function RedactorComponent_Template_button_click_20_listener() {\n          return ctx.undoAction();\n        });\n        i0.ɵɵtext(21, \"Undo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function RedactorComponent_Template_button_click_22_listener() {\n          return ctx.redoAction();\n        });\n        i0.ɵɵtext(23, \"Redo\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(24, \"div\", 13);\n        i0.ɵɵelement(25, \"div\", 14);\n        i0.ɵɵtext(26);\n        i0.ɵɵelement(27, \"div\", 15);\n        i0.ɵɵtext(28);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(29, \"div\", 16);\n        i0.ɵɵelement(30, \"canvas\", null, 17);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleProp(\"min-height\", \"50px\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"display\", ctx.show && ctx.__TOTAL_PAGES == ctx.allPages.length ? \"block\" : \"none\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵstyleProp(\"display\", ctx.show && ctx.__TOTAL_PAGES == ctx.allPages.length ? \"block\" : \"none\");\n        i0.ɵɵproperty(\"disabled\", ctx.show && ctx.__TOTAL_PAGES != ctx.allPages.length);\n        i0.ɵɵadvance(3);\n        i0.ɵɵstyleProp(\"display\", \"none\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵstyleProp(\"display\", ctx.show && ctx.__TOTAL_PAGES != ctx.allPages.length ? \"block\" : \"none\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵstyleProp(\"display\", ctx.show && ctx.__TOTAL_PAGES == ctx.allPages.length ? \"block\" : \"none\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵstyleProp(\"display\", ctx.show && ctx.__TOTAL_PAGES == ctx.allPages.length ? \"block\" : \"none\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" Page \", ctx.__CURRENT_PAGE, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" of \", ctx.__TOTAL_PAGES, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"display\", ctx.show && ctx.__TOTAL_PAGES == ctx.allPages.length ? \"block\" : \"none\");\n      }\n    },\n    directives: [i1.DropZoneComponent],\n    styles: [\"#upload-button[_ngcontent-%COMP%]{width:150px;display:block;margin:20px 45%}#pdf-main-container[_ngcontent-%COMP%]{margin:20px auto}#pdf-loader[_ngcontent-%COMP%]{text-align:center;color:#999;font-size:13px;line-height:100px}#pdf-meta[_ngcontent-%COMP%]{overflow:hidden;margin:0 0 20px}.pdf-buttons[_ngcontent-%COMP%]{float:left}#page-count-container[_ngcontent-%COMP%]{float:right}#pdf-current-page[_ngcontent-%COMP%], #pdf-total-pages[_ngcontent-%COMP%]{display:inline}#canvas-container[_ngcontent-%COMP%]{width:100%;text-align:center;margin:auto}canvas[_ngcontent-%COMP%]{border:1px solid rgba(0,0,0,.2);box-sizing:border-box}#page-loader[_ngcontent-%COMP%]{height:100px;line-height:100px;text-align:center;color:#999;font-size:13px}#download-image[_ngcontent-%COMP%]{width:150px;text-align:center;float:right}\"]\n  });\n  RedactorComponent.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RedactorComponent,\n    factory: RedactorComponent.ɵfac\n  });\n  return RedactorComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}