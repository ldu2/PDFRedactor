{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\nvar _createClass = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\nvar PDFName = /*#__PURE__*/function () {\n  function PDFName(name) {\n    _classCallCheck(this, PDFName);\n    if (name === undefined || name === null) {\n      throw new Error(\"A Name cannot be undefined\");\n    }\n    if (name instanceof PDFName) {\n      return name;\n    }\n    if (name[0] === \"/\") {\n      name = name.substr(1);\n    }\n\n    // white-space characters are not allowed\n    if (name.match(/[\\x00]/)) {\n      throw new Error(\"A Name mustn't contain the null characters\");\n    }\n    name = name.toString();\n\n    // Beginning with PDF 1.2, any character except null (character code 0)\n    // may be included in a name by writing its 2-digit hexadecimal code,\n    // preceded by the number sign character (#)\n    // ... it is recommended but not required for characters whose codes\n    // are outside the range 33 (!) to 126 (~)\n    name = name.replace(/[^\\x21-\\x7e]/g, function (c) {\n      var code = c.charCodeAt(0);\n      // replace unicode characters with `_`\n      if (code > 0xff) {\n        code = 0x5f;\n      }\n      return \"#\" + Number(code).toString(16);\n    });\n\n    // Add # in front of delimiter characters\n    //     25  %\n    //     28  (\n    //     29  )\n    //     2f  /\n    //     3c  <\n    //     3e  >\n    //     5b  [\n    //     5d  ]\n    //     7b  {\n    //     7d  }\n    name = name.replace(/[\\x25\\x28\\x29\\x2f\\x3c\\x3e\\x5b\\x5d\\x7b\\x7d]/g, function (c) {\n      var code = c.charCodeAt(0);\n      return \"#\" + Number(code).toString(16);\n    });\n    this.name = name;\n  }\n  _createClass(PDFName, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"/\" + this.name;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(xref, lexer, trial) {\n      if (lexer.getString(1) !== \"/\") {\n        if (trial) {\n          return undefined;\n        }\n        throw new Error(\"Name must start with a leading slash, found: \" + lexer.getString(1));\n      }\n      lexer.shift(1);\n      var name = \"\";\n      var done = false;\n      var c;\n      while (!done && (c = lexer._nextCharCode()) >= 0) {\n        switch (true) {\n          case c === 0x28: // (\n          case c === 0x29: // )\n          case c === 0x3c: // <\n          case c === 0x3e: // >\n          case c === 0x5b: // [\n          case c === 0x5d: // ]\n          case c === 0x7b: // {\n          case c === 0x7d: // }\n          case c === 0x2f: // /\n          case c === 0x25:\n            // %\n            done = true;\n            break;\n          case c === 0x23:\n            // #\n            var hex = lexer.readString(2);\n            name += String.fromCharCode(parseInt(hex, 16));\n            break;\n          case c >= 0x22 && c <= 0x7e:\n            // inside range of 33 (!) to 126 (~)\n            name += String.fromCharCode(c);\n            break;\n          default:\n            done = true;\n            break;\n        }\n      }\n      lexer.shift(-1);\n      return new PDFName(name);\n    }\n  }]);\n  return PDFName;\n}();\nmodule.exports = PDFName;","map":null,"metadata":{},"sourceType":"script"}