{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\nvar _createClass = require(\"C:\\\\Users\\\\Lubuntu\\\\Desktop\\\\mGit\\\\PDFRedactor\\\\Angular7PDF_Redactor\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\nvar util = require(\"../util\");\nvar PDFReference = /*#__PURE__*/function () {\n  function PDFReference(obj) {\n    _classCallCheck(this, PDFReference);\n    Object.defineProperty(this, \"object\", {\n      enumerable: true,\n      get: function get() {\n        if (!obj) {\n          return undefined;\n        }\n        if (typeof obj === \"function\") {\n          obj = obj();\n        }\n        return obj;\n      }\n    });\n  }\n  _createClass(PDFReference, [{\n    key: \"toString\",\n    value: function toString() {\n      if (this.object.id === null) {\n        throw new TypeError(\"Tried to write reference with `null` object id\");\n      }\n      return this.object.id + \" \" + this.object.rev + \" R\";\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(xref, lexer, trial) {\n      var before = lexer.pos;\n      var id = lexer.readNumber(trial);\n      if (id === undefined && !trial) {\n        throw new Error(\"Invalid indirect\");\n      }\n      lexer.skipWhitespace(1, trial);\n      var generation = lexer.readNumber(trial);\n      if (generation === undefined && !trial) {\n        throw new Error(\"Invalid indirect\");\n      }\n      lexer.skipWhitespace(1, trial);\n      if (lexer.getString(1) !== \"R\") {\n        if (trial) {\n          lexer.pos = before;\n          return undefined;\n        }\n        throw new Error(\"Invalid indirect\");\n      }\n      lexer.shift(1);\n      if (!lexer.state.references) {\n        lexer.state.references = new Map();\n      }\n      var key = \"\".concat(id, \" \").concat(generation);\n      if (lexer.state.references.has(key)) {\n        return lexer.state.references.get(key);\n      }\n      var ref = new PDFReference(parseObject.bind(null, xref, lexer.outer, id));\n      lexer.state.references.set(key, ref);\n      return ref;\n    }\n  }]);\n  return PDFReference;\n}();\nmodule.exports = PDFReference;\nfunction parseObject(xref, lexer, id) {\n  var PDFObject = require(\"./object\");\n  var Lexer = require(\"../parser/lexer\");\n  var obj = xref.get(id);\n  if (obj) {\n    return obj;\n  }\n  var offset = xref.getOffset(id);\n  if (offset === null) {\n    var entry = xref.objects[id];\n    if (entry.compressed) {\n      if (!entry.obj) {\n        lexer.pos = xref.getOffset(entry.id);\n        var _obj = PDFObject.parse(xref, lexer);\n        var type = _obj.properties.get(\"Type\");\n        if (type && type.name !== \"ObjStm\") {\n          throw new Error(\"Expected compressed object stream\");\n        }\n        var src = util.inflate(_obj);\n        // console.log(\"STRING: \", String.fromCharCode.apply(null, src))\n        var innerLexer = new Lexer(src, lexer);\n        _obj.lexer = innerLexer;\n        _obj.innerObjects = [];\n        var n = _obj.properties.get(\"N\");\n        for (var i = 0; i < n; ++i) {\n          var _id = innerLexer.readNumber(false);\n          innerLexer.skipWhitespace(null, false);\n          var _offset = innerLexer.readNumber(false);\n          innerLexer.skipWhitespace(null, true);\n          _obj.innerObjects.push({\n            id: _id,\n            offset: _offset,\n            obj: null\n          });\n        }\n        entry.obj = _obj;\n      }\n      var inner = entry.obj.innerObjects[entry.ix];\n      if (!inner.obj) {\n        var _innerLexer = entry.obj.lexer;\n        _innerLexer.pos = entry.obj.properties.get(\"First\") + inner.offset;\n        inner.obj = PDFObject.parseInner(xref, _innerLexer);\n      }\n      return inner.obj;\n    } else {\n      throw new Error(\"Expected compressed object stream\");\n    }\n  } else {\n    lexer.pos = offset;\n    return PDFObject.parse(xref, lexer);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}